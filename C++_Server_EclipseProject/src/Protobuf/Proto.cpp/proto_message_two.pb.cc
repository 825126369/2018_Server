// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_message_two.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_message_two.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ClientSendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerSendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerSendData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto() {
  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_message_two.proto");
  GOOGLE_CHECK(file != NULL);
  ClientSendData_descriptor_ = file->message_type(0);
  static const int ClientSendData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSendData, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSendData, talkmsg_),
  };
  ClientSendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSendData_descriptor_,
      ClientSendData::default_instance_,
      ClientSendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSendData));
  ServerSendData_descriptor_ = file->message_type(1);
  static const int ServerSendData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSendData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSendData, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSendData, talkmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSendData, talktime_),
  };
  ServerSendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerSendData_descriptor_,
      ServerSendData::default_instance_,
      ServerSendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerSendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerSendData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSendData_descriptor_, &ClientSendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerSendData_descriptor_, &ServerSendData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto() {
  delete ClientSendData::default_instance_;
  delete ClientSendData_reflection_;
  delete ServerSendData::default_instance_;
  delete ServerSendData_reflection_;
}

void protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027proto_message_two.proto\"5\n\016ClientSendD"
    "ata\022\022\n\nSenderName\030\001 \001(\t\022\017\n\007TalkMsg\030\002 \001(\t"
    "\"U\n\016ServerSendData\022\016\n\006Result\030\001 \001(\t\022\020\n\010Ni"
    "ckName\030\002 \001(\t\022\017\n\007TalkMsg\030\003 \001(\t\022\020\n\010TalkTim"
    "e\030\004 \001(\t", 167);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_message_two.proto", &protobuf_RegisterTypes);
  ClientSendData::default_instance_ = new ClientSendData();
  ServerSendData::default_instance_ = new ServerSendData();
  ClientSendData::default_instance_->InitAsDefaultInstance();
  ServerSendData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fmessage_5ftwo_2eproto {
  StaticDescriptorInitializer_proto_5fmessage_5ftwo_2eproto() {
    protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  }
} static_descriptor_initializer_proto_5fmessage_5ftwo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientSendData::kSenderNameFieldNumber;
const int ClientSendData::kTalkMsgFieldNumber;
#endif  // !_MSC_VER

ClientSendData::ClientSendData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientSendData)
}

void ClientSendData::InitAsDefaultInstance() {
}

ClientSendData::ClientSendData(const ClientSendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientSendData)
}

void ClientSendData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSendData::~ClientSendData() {
  // @@protoc_insertion_point(destructor:ClientSendData)
  SharedDtor();
}

void ClientSendData::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendername_;
  }
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkmsg_;
  }
  if (this != default_instance_) {
  }
}

void ClientSendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSendData_descriptor_;
}

const ClientSendData& ClientSendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

ClientSendData* ClientSendData::default_instance_ = NULL;

ClientSendData* ClientSendData::New() const {
  return new ClientSendData;
}

void ClientSendData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sendername_->clear();
      }
    }
    if (has_talkmsg()) {
      if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        talkmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientSendData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SenderName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sendername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TalkMsg;
        break;
      }

      // optional string TalkMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_TalkMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talkmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->talkmsg().data(), this->talkmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "talkmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientSendData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientSendData)
  return false;
#undef DO_
}

void ClientSendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientSendData)
  // optional string SenderName = 1;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sendername(), output);
  }

  // optional string TalkMsg = 2;
  if (has_talkmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkmsg().data(), this->talkmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->talkmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientSendData)
}

::google::protobuf::uint8* ClientSendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientSendData)
  // optional string SenderName = 1;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sendername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sendername(), target);
  }

  // optional string TalkMsg = 2;
  if (has_talkmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkmsg().data(), this->talkmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->talkmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientSendData)
  return target;
}

int ClientSendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SenderName = 1;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional string TalkMsg = 2;
    if (has_talkmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->talkmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSendData::MergeFrom(const ClientSendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_talkmsg()) {
      set_talkmsg(from.talkmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSendData::CopyFrom(const ClientSendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSendData::IsInitialized() const {

  return true;
}

void ClientSendData::Swap(ClientSendData* other) {
  if (other != this) {
    std::swap(sendername_, other->sendername_);
    std::swap(talkmsg_, other->talkmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSendData_descriptor_;
  metadata.reflection = ClientSendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerSendData::kResultFieldNumber;
const int ServerSendData::kNickNameFieldNumber;
const int ServerSendData::kTalkMsgFieldNumber;
const int ServerSendData::kTalkTimeFieldNumber;
#endif  // !_MSC_VER

ServerSendData::ServerSendData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerSendData)
}

void ServerSendData::InitAsDefaultInstance() {
}

ServerSendData::ServerSendData(const ServerSendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ServerSendData)
}

void ServerSendData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  talktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerSendData::~ServerSendData() {
  // @@protoc_insertion_point(destructor:ServerSendData)
  SharedDtor();
}

void ServerSendData::SharedDtor() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkmsg_;
  }
  if (talktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talktime_;
  }
  if (this != default_instance_) {
  }
}

void ServerSendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerSendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerSendData_descriptor_;
}

const ServerSendData& ServerSendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

ServerSendData* ServerSendData::default_instance_ = NULL;

ServerSendData* ServerSendData::New() const {
  return new ServerSendData;
}

void ServerSendData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_talkmsg()) {
      if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        talkmsg_->clear();
      }
    }
    if (has_talktime()) {
      if (talktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        talktime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerSendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerSendData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NickName;
        break;
      }

      // optional string NickName = 2;
      case 2: {
        if (tag == 18) {
         parse_NickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TalkMsg;
        break;
      }

      // optional string TalkMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_TalkMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talkmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->talkmsg().data(), this->talkmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "talkmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TalkTime;
        break;
      }

      // optional string TalkTime = 4;
      case 4: {
        if (tag == 34) {
         parse_TalkTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talktime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->talktime().data(), this->talktime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "talktime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerSendData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerSendData)
  return false;
#undef DO_
}

void ServerSendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerSendData)
  // optional string Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->result(), output);
  }

  // optional string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional string TalkMsg = 3;
  if (has_talkmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkmsg().data(), this->talkmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->talkmsg(), output);
  }

  // optional string TalkTime = 4;
  if (has_talktime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talktime().data(), this->talktime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talktime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->talktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerSendData)
}

::google::protobuf::uint8* ServerSendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ServerSendData)
  // optional string Result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  // optional string NickName = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string TalkMsg = 3;
  if (has_talkmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkmsg().data(), this->talkmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->talkmsg(), target);
  }

  // optional string TalkTime = 4;
  if (has_talktime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talktime().data(), this->talktime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talktime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->talktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerSendData)
  return target;
}

int ServerSendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

    // optional string NickName = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string TalkMsg = 3;
    if (has_talkmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->talkmsg());
    }

    // optional string TalkTime = 4;
    if (has_talktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->talktime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerSendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerSendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerSendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerSendData::MergeFrom(const ServerSendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_talkmsg()) {
      set_talkmsg(from.talkmsg());
    }
    if (from.has_talktime()) {
      set_talktime(from.talktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerSendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerSendData::CopyFrom(const ServerSendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerSendData::IsInitialized() const {

  return true;
}

void ServerSendData::Swap(ServerSendData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(nickname_, other->nickname_);
    std::swap(talkmsg_, other->talkmsg_);
    std::swap(talktime_, other->talktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerSendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerSendData_descriptor_;
  metadata.reflection = ServerSendData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
