// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_message_two.proto

#ifndef PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED
#define PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto_struct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

class ClientSendData;
class ServerSendData;
class csRegisterAccount;
class scRegisterAccount;
class csLoginGame;
class scLoginGame;
class csServerList;
class scServerList;
class csEnterGame;
class scEnterGame;

// ===================================================================

class ClientSendData : public ::google::protobuf::Message {
 public:
  ClientSendData();
  virtual ~ClientSendData();

  ClientSendData(const ClientSendData& from);

  inline ClientSendData& operator=(const ClientSendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientSendData& default_instance();

  void Swap(ClientSendData* other);

  // implements Message ----------------------------------------------

  ClientSendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientSendData& from);
  void MergeFrom(const ClientSendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SenderName = 1;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSenderNameFieldNumber = 1;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // optional string TalkMsg = 2;
  inline bool has_talkmsg() const;
  inline void clear_talkmsg();
  static const int kTalkMsgFieldNumber = 2;
  inline const ::std::string& talkmsg() const;
  inline void set_talkmsg(const ::std::string& value);
  inline void set_talkmsg(const char* value);
  inline void set_talkmsg(const char* value, size_t size);
  inline ::std::string* mutable_talkmsg();
  inline ::std::string* release_talkmsg();
  inline void set_allocated_talkmsg(::std::string* talkmsg);

  // @@protoc_insertion_point(class_scope:ClientSendData)
 private:
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_talkmsg();
  inline void clear_has_talkmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sendername_;
  ::std::string* talkmsg_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static ClientSendData* default_instance_;
};
// -------------------------------------------------------------------

class ServerSendData : public ::google::protobuf::Message {
 public:
  ServerSendData();
  virtual ~ServerSendData();

  ServerSendData(const ServerSendData& from);

  inline ServerSendData& operator=(const ServerSendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerSendData& default_instance();

  void Swap(ServerSendData* other);

  // implements Message ----------------------------------------------

  ServerSendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerSendData& from);
  void MergeFrom(const ServerSendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // optional string NickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string TalkMsg = 3;
  inline bool has_talkmsg() const;
  inline void clear_talkmsg();
  static const int kTalkMsgFieldNumber = 3;
  inline const ::std::string& talkmsg() const;
  inline void set_talkmsg(const ::std::string& value);
  inline void set_talkmsg(const char* value);
  inline void set_talkmsg(const char* value, size_t size);
  inline ::std::string* mutable_talkmsg();
  inline ::std::string* release_talkmsg();
  inline void set_allocated_talkmsg(::std::string* talkmsg);

  // optional string TalkTime = 4;
  inline bool has_talktime() const;
  inline void clear_talktime();
  static const int kTalkTimeFieldNumber = 4;
  inline const ::std::string& talktime() const;
  inline void set_talktime(const ::std::string& value);
  inline void set_talktime(const char* value);
  inline void set_talktime(const char* value, size_t size);
  inline ::std::string* mutable_talktime();
  inline ::std::string* release_talktime();
  inline void set_allocated_talktime(::std::string* talktime);

  // @@protoc_insertion_point(class_scope:ServerSendData)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_talkmsg();
  inline void clear_has_talkmsg();
  inline void set_has_talktime();
  inline void clear_has_talktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* result_;
  ::std::string* nickname_;
  ::std::string* talkmsg_;
  ::std::string* talktime_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static ServerSendData* default_instance_;
};
// -------------------------------------------------------------------

class csRegisterAccount : public ::google::protobuf::Message {
 public:
  csRegisterAccount();
  virtual ~csRegisterAccount();

  csRegisterAccount(const csRegisterAccount& from);

  inline csRegisterAccount& operator=(const csRegisterAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csRegisterAccount& default_instance();

  void Swap(csRegisterAccount* other);

  // implements Message ----------------------------------------------

  csRegisterAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csRegisterAccount& from);
  void MergeFrom(const csRegisterAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string accountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string repeatPassword = 3;
  inline bool has_repeatpassword() const;
  inline void clear_repeatpassword();
  static const int kRepeatPasswordFieldNumber = 3;
  inline const ::std::string& repeatpassword() const;
  inline void set_repeatpassword(const ::std::string& value);
  inline void set_repeatpassword(const char* value);
  inline void set_repeatpassword(const char* value, size_t size);
  inline ::std::string* mutable_repeatpassword();
  inline ::std::string* release_repeatpassword();
  inline void set_allocated_repeatpassword(::std::string* repeatpassword);

  // @@protoc_insertion_point(class_scope:csRegisterAccount)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_repeatpassword();
  inline void clear_has_repeatpassword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* accountname_;
  ::std::string* password_;
  ::std::string* repeatpassword_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static csRegisterAccount* default_instance_;
};
// -------------------------------------------------------------------

class scRegisterAccount : public ::google::protobuf::Message {
 public:
  scRegisterAccount();
  virtual ~scRegisterAccount();

  scRegisterAccount(const scRegisterAccount& from);

  inline scRegisterAccount& operator=(const scRegisterAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scRegisterAccount& default_instance();

  void Swap(scRegisterAccount* other);

  // implements Message ----------------------------------------------

  scRegisterAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scRegisterAccount& from);
  void MergeFrom(const scRegisterAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:scRegisterAccount)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool result_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static scRegisterAccount* default_instance_;
};
// -------------------------------------------------------------------

class csLoginGame : public ::google::protobuf::Message {
 public:
  csLoginGame();
  virtual ~csLoginGame();

  csLoginGame(const csLoginGame& from);

  inline csLoginGame& operator=(const csLoginGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csLoginGame& default_instance();

  void Swap(csLoginGame* other);

  // implements Message ----------------------------------------------

  csLoginGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csLoginGame& from);
  void MergeFrom(const csLoginGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string accountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:csLoginGame)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* accountname_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static csLoginGame* default_instance_;
};
// -------------------------------------------------------------------

class scLoginGame : public ::google::protobuf::Message {
 public:
  scLoginGame();
  virtual ~scLoginGame();

  scLoginGame(const scLoginGame& from);

  inline scLoginGame& operator=(const scLoginGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scLoginGame& default_instance();

  void Swap(scLoginGame* other);

  // implements Message ----------------------------------------------

  scLoginGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scLoginGame& from);
  void MergeFrom(const scLoginGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:scLoginGame)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool result_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static scLoginGame* default_instance_;
};
// -------------------------------------------------------------------

class csServerList : public ::google::protobuf::Message {
 public:
  csServerList();
  virtual ~csServerList();

  csServerList(const csServerList& from);

  inline csServerList& operator=(const csServerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csServerList& default_instance();

  void Swap(csServerList* other);

  // implements Message ----------------------------------------------

  csServerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csServerList& from);
  void MergeFrom(const csServerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:csServerList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static csServerList* default_instance_;
};
// -------------------------------------------------------------------

class scServerList : public ::google::protobuf::Message {
 public:
  scServerList();
  virtual ~scServerList();

  scServerList(const scServerList& from);

  inline scServerList& operator=(const scServerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scServerList& default_instance();

  void Swap(scServerList* other);

  // implements Message ----------------------------------------------

  scServerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scServerList& from);
  void MergeFrom(const scServerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .struct_serverList ServerList = 1;
  inline int serverlist_size() const;
  inline void clear_serverlist();
  static const int kServerListFieldNumber = 1;
  inline const ::struct_serverList& serverlist(int index) const;
  inline ::struct_serverList* mutable_serverlist(int index);
  inline ::struct_serverList* add_serverlist();
  inline const ::google::protobuf::RepeatedPtrField< ::struct_serverList >&
      serverlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::struct_serverList >*
      mutable_serverlist();

  // @@protoc_insertion_point(class_scope:scServerList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::struct_serverList > serverlist_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static scServerList* default_instance_;
};
// -------------------------------------------------------------------

class csEnterGame : public ::google::protobuf::Message {
 public:
  csEnterGame();
  virtual ~csEnterGame();

  csEnterGame(const csEnterGame& from);

  inline csEnterGame& operator=(const csEnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csEnterGame& default_instance();

  void Swap(csEnterGame* other);

  // implements Message ----------------------------------------------

  csEnterGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csEnterGame& from);
  void MergeFrom(const csEnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ServerId = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:csEnterGame)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 serverid_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static csEnterGame* default_instance_;
};
// -------------------------------------------------------------------

class scEnterGame : public ::google::protobuf::Message {
 public:
  scEnterGame();
  virtual ~scEnterGame();

  scEnterGame(const scEnterGame& from);

  inline scEnterGame& operator=(const scEnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scEnterGame& default_instance();

  void Swap(scEnterGame* other);

  // implements Message ----------------------------------------------

  scEnterGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scEnterGame& from);
  void MergeFrom(const scEnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ServerId = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:scEnterGame)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 serverid_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static scEnterGame* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientSendData

// optional string SenderName = 1;
inline bool ClientSendData::has_sendername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientSendData::set_has_sendername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientSendData::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientSendData::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& ClientSendData::sendername() const {
  // @@protoc_insertion_point(field_get:ClientSendData.SenderName)
  return *sendername_;
}
inline void ClientSendData::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
  // @@protoc_insertion_point(field_set:ClientSendData.SenderName)
}
inline void ClientSendData::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientSendData.SenderName)
}
inline void ClientSendData::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientSendData.SenderName)
}
inline ::std::string* ClientSendData::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientSendData.SenderName)
  return sendername_;
}
inline ::std::string* ClientSendData::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientSendData::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientSendData.SenderName)
}

// optional string TalkMsg = 2;
inline bool ClientSendData::has_talkmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientSendData::set_has_talkmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientSendData::clear_has_talkmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientSendData::clear_talkmsg() {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_->clear();
  }
  clear_has_talkmsg();
}
inline const ::std::string& ClientSendData::talkmsg() const {
  // @@protoc_insertion_point(field_get:ClientSendData.TalkMsg)
  return *talkmsg_;
}
inline void ClientSendData::set_talkmsg(const ::std::string& value) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(value);
  // @@protoc_insertion_point(field_set:ClientSendData.TalkMsg)
}
inline void ClientSendData::set_talkmsg(const char* value) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientSendData.TalkMsg)
}
inline void ClientSendData::set_talkmsg(const char* value, size_t size) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientSendData.TalkMsg)
}
inline ::std::string* ClientSendData::mutable_talkmsg() {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientSendData.TalkMsg)
  return talkmsg_;
}
inline ::std::string* ClientSendData::release_talkmsg() {
  clear_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = talkmsg_;
    talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientSendData::set_allocated_talkmsg(::std::string* talkmsg) {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkmsg_;
  }
  if (talkmsg) {
    set_has_talkmsg();
    talkmsg_ = talkmsg;
  } else {
    clear_has_talkmsg();
    talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientSendData.TalkMsg)
}

// -------------------------------------------------------------------

// ServerSendData

// optional string Result = 1;
inline bool ServerSendData::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerSendData::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerSendData::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerSendData::clear_result() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& ServerSendData::result() const {
  // @@protoc_insertion_point(field_get:ServerSendData.Result)
  return *result_;
}
inline void ServerSendData::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set:ServerSendData.Result)
}
inline void ServerSendData::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerSendData.Result)
}
inline void ServerSendData::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerSendData.Result)
}
inline ::std::string* ServerSendData::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ServerSendData.Result)
  return result_;
}
inline ::std::string* ServerSendData::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerSendData::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ServerSendData.Result)
}

// optional string NickName = 2;
inline bool ServerSendData::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerSendData::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerSendData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerSendData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ServerSendData::nickname() const {
  // @@protoc_insertion_point(field_get:ServerSendData.NickName)
  return *nickname_;
}
inline void ServerSendData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:ServerSendData.NickName)
}
inline void ServerSendData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerSendData.NickName)
}
inline void ServerSendData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerSendData.NickName)
}
inline ::std::string* ServerSendData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ServerSendData.NickName)
  return nickname_;
}
inline ::std::string* ServerSendData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerSendData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ServerSendData.NickName)
}

// optional string TalkMsg = 3;
inline bool ServerSendData::has_talkmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerSendData::set_has_talkmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerSendData::clear_has_talkmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerSendData::clear_talkmsg() {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_->clear();
  }
  clear_has_talkmsg();
}
inline const ::std::string& ServerSendData::talkmsg() const {
  // @@protoc_insertion_point(field_get:ServerSendData.TalkMsg)
  return *talkmsg_;
}
inline void ServerSendData::set_talkmsg(const ::std::string& value) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(value);
  // @@protoc_insertion_point(field_set:ServerSendData.TalkMsg)
}
inline void ServerSendData::set_talkmsg(const char* value) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerSendData.TalkMsg)
}
inline void ServerSendData::set_talkmsg(const char* value, size_t size) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerSendData.TalkMsg)
}
inline ::std::string* ServerSendData::mutable_talkmsg() {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ServerSendData.TalkMsg)
  return talkmsg_;
}
inline ::std::string* ServerSendData::release_talkmsg() {
  clear_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = talkmsg_;
    talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerSendData::set_allocated_talkmsg(::std::string* talkmsg) {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkmsg_;
  }
  if (talkmsg) {
    set_has_talkmsg();
    talkmsg_ = talkmsg;
  } else {
    clear_has_talkmsg();
    talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ServerSendData.TalkMsg)
}

// optional string TalkTime = 4;
inline bool ServerSendData::has_talktime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerSendData::set_has_talktime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerSendData::clear_has_talktime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerSendData::clear_talktime() {
  if (talktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talktime_->clear();
  }
  clear_has_talktime();
}
inline const ::std::string& ServerSendData::talktime() const {
  // @@protoc_insertion_point(field_get:ServerSendData.TalkTime)
  return *talktime_;
}
inline void ServerSendData::set_talktime(const ::std::string& value) {
  set_has_talktime();
  if (talktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talktime_ = new ::std::string;
  }
  talktime_->assign(value);
  // @@protoc_insertion_point(field_set:ServerSendData.TalkTime)
}
inline void ServerSendData::set_talktime(const char* value) {
  set_has_talktime();
  if (talktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talktime_ = new ::std::string;
  }
  talktime_->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerSendData.TalkTime)
}
inline void ServerSendData::set_talktime(const char* value, size_t size) {
  set_has_talktime();
  if (talktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talktime_ = new ::std::string;
  }
  talktime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerSendData.TalkTime)
}
inline ::std::string* ServerSendData::mutable_talktime() {
  set_has_talktime();
  if (talktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talktime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ServerSendData.TalkTime)
  return talktime_;
}
inline ::std::string* ServerSendData::release_talktime() {
  clear_has_talktime();
  if (talktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = talktime_;
    talktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerSendData::set_allocated_talktime(::std::string* talktime) {
  if (talktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talktime_;
  }
  if (talktime) {
    set_has_talktime();
    talktime_ = talktime;
  } else {
    clear_has_talktime();
    talktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ServerSendData.TalkTime)
}

// -------------------------------------------------------------------

// csRegisterAccount

// optional string accountName = 1;
inline bool csRegisterAccount::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csRegisterAccount::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csRegisterAccount::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csRegisterAccount::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& csRegisterAccount::accountname() const {
  // @@protoc_insertion_point(field_get:csRegisterAccount.accountName)
  return *accountname_;
}
inline void csRegisterAccount::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set:csRegisterAccount.accountName)
}
inline void csRegisterAccount::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set_char:csRegisterAccount.accountName)
}
inline void csRegisterAccount::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csRegisterAccount.accountName)
}
inline ::std::string* csRegisterAccount::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csRegisterAccount.accountName)
  return accountname_;
}
inline ::std::string* csRegisterAccount::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csRegisterAccount::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csRegisterAccount.accountName)
}

// optional string password = 2;
inline bool csRegisterAccount::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csRegisterAccount::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csRegisterAccount::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csRegisterAccount::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& csRegisterAccount::password() const {
  // @@protoc_insertion_point(field_get:csRegisterAccount.password)
  return *password_;
}
inline void csRegisterAccount::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:csRegisterAccount.password)
}
inline void csRegisterAccount::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:csRegisterAccount.password)
}
inline void csRegisterAccount::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csRegisterAccount.password)
}
inline ::std::string* csRegisterAccount::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csRegisterAccount.password)
  return password_;
}
inline ::std::string* csRegisterAccount::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csRegisterAccount::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csRegisterAccount.password)
}

// optional string repeatPassword = 3;
inline bool csRegisterAccount::has_repeatpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void csRegisterAccount::set_has_repeatpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void csRegisterAccount::clear_has_repeatpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void csRegisterAccount::clear_repeatpassword() {
  if (repeatpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repeatpassword_->clear();
  }
  clear_has_repeatpassword();
}
inline const ::std::string& csRegisterAccount::repeatpassword() const {
  // @@protoc_insertion_point(field_get:csRegisterAccount.repeatPassword)
  return *repeatpassword_;
}
inline void csRegisterAccount::set_repeatpassword(const ::std::string& value) {
  set_has_repeatpassword();
  if (repeatpassword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repeatpassword_ = new ::std::string;
  }
  repeatpassword_->assign(value);
  // @@protoc_insertion_point(field_set:csRegisterAccount.repeatPassword)
}
inline void csRegisterAccount::set_repeatpassword(const char* value) {
  set_has_repeatpassword();
  if (repeatpassword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repeatpassword_ = new ::std::string;
  }
  repeatpassword_->assign(value);
  // @@protoc_insertion_point(field_set_char:csRegisterAccount.repeatPassword)
}
inline void csRegisterAccount::set_repeatpassword(const char* value, size_t size) {
  set_has_repeatpassword();
  if (repeatpassword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repeatpassword_ = new ::std::string;
  }
  repeatpassword_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csRegisterAccount.repeatPassword)
}
inline ::std::string* csRegisterAccount::mutable_repeatpassword() {
  set_has_repeatpassword();
  if (repeatpassword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repeatpassword_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csRegisterAccount.repeatPassword)
  return repeatpassword_;
}
inline ::std::string* csRegisterAccount::release_repeatpassword() {
  clear_has_repeatpassword();
  if (repeatpassword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = repeatpassword_;
    repeatpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csRegisterAccount::set_allocated_repeatpassword(::std::string* repeatpassword) {
  if (repeatpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repeatpassword_;
  }
  if (repeatpassword) {
    set_has_repeatpassword();
    repeatpassword_ = repeatpassword;
  } else {
    clear_has_repeatpassword();
    repeatpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csRegisterAccount.repeatPassword)
}

// -------------------------------------------------------------------

// scRegisterAccount

// optional bool result = 1;
inline bool scRegisterAccount::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scRegisterAccount::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scRegisterAccount::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scRegisterAccount::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool scRegisterAccount::result() const {
  // @@protoc_insertion_point(field_get:scRegisterAccount.result)
  return result_;
}
inline void scRegisterAccount::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:scRegisterAccount.result)
}

// -------------------------------------------------------------------

// csLoginGame

// optional string accountName = 1;
inline bool csLoginGame::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csLoginGame::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csLoginGame::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csLoginGame::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& csLoginGame::accountname() const {
  // @@protoc_insertion_point(field_get:csLoginGame.accountName)
  return *accountname_;
}
inline void csLoginGame::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set:csLoginGame.accountName)
}
inline void csLoginGame::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set_char:csLoginGame.accountName)
}
inline void csLoginGame::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csLoginGame.accountName)
}
inline ::std::string* csLoginGame::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csLoginGame.accountName)
  return accountname_;
}
inline ::std::string* csLoginGame::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csLoginGame::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csLoginGame.accountName)
}

// optional string password = 2;
inline bool csLoginGame::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csLoginGame::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csLoginGame::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csLoginGame::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& csLoginGame::password() const {
  // @@protoc_insertion_point(field_get:csLoginGame.password)
  return *password_;
}
inline void csLoginGame::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:csLoginGame.password)
}
inline void csLoginGame::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:csLoginGame.password)
}
inline void csLoginGame::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csLoginGame.password)
}
inline ::std::string* csLoginGame::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csLoginGame.password)
  return password_;
}
inline ::std::string* csLoginGame::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csLoginGame::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csLoginGame.password)
}

// -------------------------------------------------------------------

// scLoginGame

// optional bool result = 1;
inline bool scLoginGame::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scLoginGame::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scLoginGame::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scLoginGame::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool scLoginGame::result() const {
  // @@protoc_insertion_point(field_get:scLoginGame.result)
  return result_;
}
inline void scLoginGame::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:scLoginGame.result)
}

// -------------------------------------------------------------------

// csServerList

// -------------------------------------------------------------------

// scServerList

// repeated .struct_serverList ServerList = 1;
inline int scServerList::serverlist_size() const {
  return serverlist_.size();
}
inline void scServerList::clear_serverlist() {
  serverlist_.Clear();
}
inline const ::struct_serverList& scServerList::serverlist(int index) const {
  // @@protoc_insertion_point(field_get:scServerList.ServerList)
  return serverlist_.Get(index);
}
inline ::struct_serverList* scServerList::mutable_serverlist(int index) {
  // @@protoc_insertion_point(field_mutable:scServerList.ServerList)
  return serverlist_.Mutable(index);
}
inline ::struct_serverList* scServerList::add_serverlist() {
  // @@protoc_insertion_point(field_add:scServerList.ServerList)
  return serverlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::struct_serverList >&
scServerList::serverlist() const {
  // @@protoc_insertion_point(field_list:scServerList.ServerList)
  return serverlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::struct_serverList >*
scServerList::mutable_serverlist() {
  // @@protoc_insertion_point(field_mutable_list:scServerList.ServerList)
  return &serverlist_;
}

// -------------------------------------------------------------------

// csEnterGame

// optional int32 ServerId = 1;
inline bool csEnterGame::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csEnterGame::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csEnterGame::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csEnterGame::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 csEnterGame::serverid() const {
  // @@protoc_insertion_point(field_get:csEnterGame.ServerId)
  return serverid_;
}
inline void csEnterGame::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:csEnterGame.ServerId)
}

// -------------------------------------------------------------------

// scEnterGame

// optional int32 ServerId = 1;
inline bool scEnterGame::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scEnterGame::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scEnterGame::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scEnterGame::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 scEnterGame::serverid() const {
  // @@protoc_insertion_point(field_get:scEnterGame.ServerId)
  return serverid_;
}
inline void scEnterGame::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:scEnterGame.ServerId)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED
