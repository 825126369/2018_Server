// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_message_two.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_message_two.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* csChatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csChatData_reflection_ = NULL;
const ::google::protobuf::Descriptor* scChatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scChatData_reflection_ = NULL;
const ::google::protobuf::Descriptor* csRegisterAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csRegisterAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* scRegisterAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scRegisterAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* csLoginGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csLoginGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* scLoginGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scLoginGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* csSelectServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csSelectServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* scSelectServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scSelectServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* csCreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  csCreateRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* scCreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  scCreateRole_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto() {
  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_message_two.proto");
  GOOGLE_CHECK(file != NULL);
  csChatData_descriptor_ = file->message_type(0);
  static const int csChatData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csChatData, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csChatData, talkmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csChatData, otherid_),
  };
  csChatData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csChatData_descriptor_,
      csChatData::default_instance_,
      csChatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csChatData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csChatData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csChatData));
  scChatData_descriptor_ = file->message_type(1);
  static const int scChatData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scChatData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scChatData, chatinfo_),
  };
  scChatData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scChatData_descriptor_,
      scChatData::default_instance_,
      scChatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scChatData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scChatData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scChatData));
  csRegisterAccount_descriptor_ = file->message_type(2);
  static const int csRegisterAccount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csRegisterAccount, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csRegisterAccount, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csRegisterAccount, repeatpassword_),
  };
  csRegisterAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csRegisterAccount_descriptor_,
      csRegisterAccount::default_instance_,
      csRegisterAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csRegisterAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csRegisterAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csRegisterAccount));
  scRegisterAccount_descriptor_ = file->message_type(3);
  static const int scRegisterAccount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scRegisterAccount, result_),
  };
  scRegisterAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scRegisterAccount_descriptor_,
      scRegisterAccount::default_instance_,
      scRegisterAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scRegisterAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scRegisterAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scRegisterAccount));
  csLoginGame_descriptor_ = file->message_type(4);
  static const int csLoginGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csLoginGame, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csLoginGame, password_),
  };
  csLoginGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csLoginGame_descriptor_,
      csLoginGame::default_instance_,
      csLoginGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csLoginGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csLoginGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csLoginGame));
  scLoginGame_descriptor_ = file->message_type(5);
  static const int scLoginGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scLoginGame, result_),
  };
  scLoginGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scLoginGame_descriptor_,
      scLoginGame::default_instance_,
      scLoginGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scLoginGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scLoginGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scLoginGame));
  csSelectServer_descriptor_ = file->message_type(6);
  static const int csSelectServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csSelectServer, id_),
  };
  csSelectServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csSelectServer_descriptor_,
      csSelectServer::default_instance_,
      csSelectServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csSelectServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csSelectServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csSelectServer));
  scSelectServer_descriptor_ = file->message_type(7);
  static const int scSelectServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scSelectServer, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scSelectServer, action_),
  };
  scSelectServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scSelectServer_descriptor_,
      scSelectServer::default_instance_,
      scSelectServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scSelectServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scSelectServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scSelectServer));
  csCreateRole_descriptor_ = file->message_type(8);
  static const int csCreateRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCreateRole, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCreateRole, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCreateRole, profession_),
  };
  csCreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      csCreateRole_descriptor_,
      csCreateRole::default_instance_,
      csCreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(csCreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(csCreateRole));
  scCreateRole_descriptor_ = file->message_type(9);
  static const int scCreateRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCreateRole, result_),
  };
  scCreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      scCreateRole_descriptor_,
      scCreateRole::default_instance_,
      scCreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(scCreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(scCreateRole));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csChatData_descriptor_, &csChatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scChatData_descriptor_, &scChatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csRegisterAccount_descriptor_, &csRegisterAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scRegisterAccount_descriptor_, &scRegisterAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csLoginGame_descriptor_, &csLoginGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scLoginGame_descriptor_, &scLoginGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csSelectServer_descriptor_, &csSelectServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scSelectServer_descriptor_, &scSelectServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    csCreateRole_descriptor_, &csCreateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    scCreateRole_descriptor_, &scCreateRole::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto() {
  delete csChatData::default_instance_;
  delete csChatData_reflection_;
  delete scChatData::default_instance_;
  delete scChatData_reflection_;
  delete csRegisterAccount::default_instance_;
  delete csRegisterAccount_reflection_;
  delete scRegisterAccount::default_instance_;
  delete scRegisterAccount_reflection_;
  delete csLoginGame::default_instance_;
  delete csLoginGame_reflection_;
  delete scLoginGame::default_instance_;
  delete scLoginGame_reflection_;
  delete csSelectServer::default_instance_;
  delete csSelectServer_reflection_;
  delete scSelectServer::default_instance_;
  delete scSelectServer_reflection_;
  delete csCreateRole::default_instance_;
  delete csCreateRole_reflection_;
  delete scCreateRole::default_instance_;
  delete scCreateRole_reflection_;
}

void protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_proto_5fstruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027proto_message_two.proto\032\022proto_struct."
    "proto\"A\n\ncsChatData\022\021\n\tchannelId\030\001 \001(\r\022\017"
    "\n\007talkMsg\030\002 \001(\t\022\017\n\007otherId\030\003 \001(\004\"@\n\nscCh"
    "atData\022\016\n\006result\030\001 \001(\r\022\"\n\010chatInfo\030\002 \001(\013"
    "2\020.struct_ChatInfo\"R\n\021csRegisterAccount\022"
    "\023\n\013accountName\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\026"
    "\n\016repeatPassword\030\003 \001(\t\"#\n\021scRegisterAcco"
    "unt\022\016\n\006result\030\001 \001(\r\"4\n\013csLoginGame\022\023\n\013ac"
    "countName\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"\035\n\013scL"
    "oginGame\022\016\n\006result\030\001 \001(\r\"\034\n\016csSelectServ"
    "er\022\n\n\002id\030\001 \001(\r\"0\n\016scSelectServer\022\016\n\006resu"
    "lt\030\001 \001(\r\022\016\n\006action\030\002 \001(\r\"=\n\014csCreateRole"
    "\022\014\n\004name\030\001 \001(\t\022\013\n\003sex\030\002 \001(\r\022\022\n\nprofessio"
    "n\030\003 \001(\r\"\036\n\014scCreateRole\022\016\n\006result\030\001 \001(\r", 559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_message_two.proto", &protobuf_RegisterTypes);
  csChatData::default_instance_ = new csChatData();
  scChatData::default_instance_ = new scChatData();
  csRegisterAccount::default_instance_ = new csRegisterAccount();
  scRegisterAccount::default_instance_ = new scRegisterAccount();
  csLoginGame::default_instance_ = new csLoginGame();
  scLoginGame::default_instance_ = new scLoginGame();
  csSelectServer::default_instance_ = new csSelectServer();
  scSelectServer::default_instance_ = new scSelectServer();
  csCreateRole::default_instance_ = new csCreateRole();
  scCreateRole::default_instance_ = new scCreateRole();
  csChatData::default_instance_->InitAsDefaultInstance();
  scChatData::default_instance_->InitAsDefaultInstance();
  csRegisterAccount::default_instance_->InitAsDefaultInstance();
  scRegisterAccount::default_instance_->InitAsDefaultInstance();
  csLoginGame::default_instance_->InitAsDefaultInstance();
  scLoginGame::default_instance_->InitAsDefaultInstance();
  csSelectServer::default_instance_->InitAsDefaultInstance();
  scSelectServer::default_instance_->InitAsDefaultInstance();
  csCreateRole::default_instance_->InitAsDefaultInstance();
  scCreateRole::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fmessage_5ftwo_2eproto {
  StaticDescriptorInitializer_proto_5fmessage_5ftwo_2eproto() {
    protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  }
} static_descriptor_initializer_proto_5fmessage_5ftwo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int csChatData::kChannelIdFieldNumber;
const int csChatData::kTalkMsgFieldNumber;
const int csChatData::kOtherIdFieldNumber;
#endif  // !_MSC_VER

csChatData::csChatData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csChatData)
}

void csChatData::InitAsDefaultInstance() {
}

csChatData::csChatData(const csChatData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csChatData)
}

void csChatData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channelid_ = 0u;
  talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csChatData::~csChatData() {
  // @@protoc_insertion_point(destructor:csChatData)
  SharedDtor();
}

void csChatData::SharedDtor() {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkmsg_;
  }
  if (this != default_instance_) {
  }
}

void csChatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csChatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csChatData_descriptor_;
}

const csChatData& csChatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

csChatData* csChatData::default_instance_ = NULL;

csChatData* csChatData::New() const {
  return new csChatData;
}

void csChatData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csChatData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(otherid_, channelid_);
    if (has_talkmsg()) {
      if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        talkmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csChatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:csChatData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channelId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_talkMsg;
        break;
      }

      // optional string talkMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_talkMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talkmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->talkmsg().data(), this->talkmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "talkmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_otherId;
        break;
      }

      // optional uint64 otherId = 3;
      case 3: {
        if (tag == 24) {
         parse_otherId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csChatData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csChatData)
  return false;
#undef DO_
}

void csChatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csChatData)
  // optional uint32 channelId = 1;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelid(), output);
  }

  // optional string talkMsg = 2;
  if (has_talkmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkmsg().data(), this->talkmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->talkmsg(), output);
  }

  // optional uint64 otherId = 3;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->otherid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:csChatData)
}

::google::protobuf::uint8* csChatData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:csChatData)
  // optional uint32 channelId = 1;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelid(), target);
  }

  // optional string talkMsg = 2;
  if (has_talkmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkmsg().data(), this->talkmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->talkmsg(), target);
  }

  // optional uint64 otherId = 3;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->otherid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csChatData)
  return target;
}

int csChatData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channelId = 1;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // optional string talkMsg = 2;
    if (has_talkmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->talkmsg());
    }

    // optional uint64 otherId = 3;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->otherid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csChatData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csChatData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csChatData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csChatData::MergeFrom(const csChatData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_talkmsg()) {
      set_talkmsg(from.talkmsg());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csChatData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csChatData::CopyFrom(const csChatData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csChatData::IsInitialized() const {

  return true;
}

void csChatData::Swap(csChatData* other) {
  if (other != this) {
    std::swap(channelid_, other->channelid_);
    std::swap(talkmsg_, other->talkmsg_);
    std::swap(otherid_, other->otherid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csChatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csChatData_descriptor_;
  metadata.reflection = csChatData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scChatData::kResultFieldNumber;
const int scChatData::kChatInfoFieldNumber;
#endif  // !_MSC_VER

scChatData::scChatData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scChatData)
}

void scChatData::InitAsDefaultInstance() {
  chatinfo_ = const_cast< ::struct_ChatInfo*>(&::struct_ChatInfo::default_instance());
}

scChatData::scChatData(const scChatData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scChatData)
}

void scChatData::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  chatinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scChatData::~scChatData() {
  // @@protoc_insertion_point(destructor:scChatData)
  SharedDtor();
}

void scChatData::SharedDtor() {
  if (this != default_instance_) {
    delete chatinfo_;
  }
}

void scChatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scChatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scChatData_descriptor_;
}

const scChatData& scChatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

scChatData* scChatData::default_instance_ = NULL;

scChatData* scChatData::New() const {
  return new scChatData;
}

void scChatData::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_ = 0u;
    if (has_chatinfo()) {
      if (chatinfo_ != NULL) chatinfo_->::struct_ChatInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scChatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scChatData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chatInfo;
        break;
      }

      // optional .struct_ChatInfo chatInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_chatInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scChatData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scChatData)
  return false;
#undef DO_
}

void scChatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scChatData)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .struct_ChatInfo chatInfo = 2;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chatinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scChatData)
}

::google::protobuf::uint8* scChatData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scChatData)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .struct_ChatInfo chatInfo = 2;
  if (has_chatinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chatinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scChatData)
  return target;
}

int scChatData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .struct_ChatInfo chatInfo = 2;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scChatData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scChatData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scChatData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scChatData::MergeFrom(const scChatData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_chatinfo()) {
      mutable_chatinfo()->::struct_ChatInfo::MergeFrom(from.chatinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scChatData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scChatData::CopyFrom(const scChatData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scChatData::IsInitialized() const {

  return true;
}

void scChatData::Swap(scChatData* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scChatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scChatData_descriptor_;
  metadata.reflection = scChatData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csRegisterAccount::kAccountNameFieldNumber;
const int csRegisterAccount::kPasswordFieldNumber;
const int csRegisterAccount::kRepeatPasswordFieldNumber;
#endif  // !_MSC_VER

csRegisterAccount::csRegisterAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csRegisterAccount)
}

void csRegisterAccount::InitAsDefaultInstance() {
}

csRegisterAccount::csRegisterAccount(const csRegisterAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csRegisterAccount)
}

void csRegisterAccount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  repeatpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csRegisterAccount::~csRegisterAccount() {
  // @@protoc_insertion_point(destructor:csRegisterAccount)
  SharedDtor();
}

void csRegisterAccount::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (repeatpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repeatpassword_;
  }
  if (this != default_instance_) {
  }
}

void csRegisterAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csRegisterAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csRegisterAccount_descriptor_;
}

const csRegisterAccount& csRegisterAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

csRegisterAccount* csRegisterAccount::default_instance_ = NULL;

csRegisterAccount* csRegisterAccount::New() const {
  return new csRegisterAccount;
}

void csRegisterAccount::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountname_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_repeatpassword()) {
      if (repeatpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        repeatpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csRegisterAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:csRegisterAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string accountName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_repeatPassword;
        break;
      }

      // optional string repeatPassword = 3;
      case 3: {
        if (tag == 26) {
         parse_repeatPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repeatpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->repeatpassword().data(), this->repeatpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "repeatpassword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csRegisterAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csRegisterAccount)
  return false;
#undef DO_
}

void csRegisterAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csRegisterAccount)
  // optional string accountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->accountname(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string repeatPassword = 3;
  if (has_repeatpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->repeatpassword().data(), this->repeatpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "repeatpassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->repeatpassword(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:csRegisterAccount)
}

::google::protobuf::uint8* csRegisterAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:csRegisterAccount)
  // optional string accountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string repeatPassword = 3;
  if (has_repeatpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->repeatpassword().data(), this->repeatpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "repeatpassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->repeatpassword(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csRegisterAccount)
  return target;
}

int csRegisterAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string accountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string repeatPassword = 3;
    if (has_repeatpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->repeatpassword());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csRegisterAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csRegisterAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csRegisterAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csRegisterAccount::MergeFrom(const csRegisterAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_repeatpassword()) {
      set_repeatpassword(from.repeatpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csRegisterAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csRegisterAccount::CopyFrom(const csRegisterAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csRegisterAccount::IsInitialized() const {

  return true;
}

void csRegisterAccount::Swap(csRegisterAccount* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(password_, other->password_);
    std::swap(repeatpassword_, other->repeatpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csRegisterAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csRegisterAccount_descriptor_;
  metadata.reflection = csRegisterAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scRegisterAccount::kResultFieldNumber;
#endif  // !_MSC_VER

scRegisterAccount::scRegisterAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scRegisterAccount)
}

void scRegisterAccount::InitAsDefaultInstance() {
}

scRegisterAccount::scRegisterAccount(const scRegisterAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scRegisterAccount)
}

void scRegisterAccount::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scRegisterAccount::~scRegisterAccount() {
  // @@protoc_insertion_point(destructor:scRegisterAccount)
  SharedDtor();
}

void scRegisterAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scRegisterAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scRegisterAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scRegisterAccount_descriptor_;
}

const scRegisterAccount& scRegisterAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

scRegisterAccount* scRegisterAccount::default_instance_ = NULL;

scRegisterAccount* scRegisterAccount::New() const {
  return new scRegisterAccount;
}

void scRegisterAccount::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scRegisterAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scRegisterAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scRegisterAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scRegisterAccount)
  return false;
#undef DO_
}

void scRegisterAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scRegisterAccount)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scRegisterAccount)
}

::google::protobuf::uint8* scRegisterAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scRegisterAccount)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scRegisterAccount)
  return target;
}

int scRegisterAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scRegisterAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scRegisterAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scRegisterAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scRegisterAccount::MergeFrom(const scRegisterAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scRegisterAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scRegisterAccount::CopyFrom(const scRegisterAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scRegisterAccount::IsInitialized() const {

  return true;
}

void scRegisterAccount::Swap(scRegisterAccount* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scRegisterAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scRegisterAccount_descriptor_;
  metadata.reflection = scRegisterAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csLoginGame::kAccountNameFieldNumber;
const int csLoginGame::kPasswordFieldNumber;
#endif  // !_MSC_VER

csLoginGame::csLoginGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csLoginGame)
}

void csLoginGame::InitAsDefaultInstance() {
}

csLoginGame::csLoginGame(const csLoginGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csLoginGame)
}

void csLoginGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csLoginGame::~csLoginGame() {
  // @@protoc_insertion_point(destructor:csLoginGame)
  SharedDtor();
}

void csLoginGame::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void csLoginGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csLoginGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csLoginGame_descriptor_;
}

const csLoginGame& csLoginGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

csLoginGame* csLoginGame::default_instance_ = NULL;

csLoginGame* csLoginGame::New() const {
  return new csLoginGame;
}

void csLoginGame::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accountname_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csLoginGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:csLoginGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string accountName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accountname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csLoginGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csLoginGame)
  return false;
#undef DO_
}

void csLoginGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csLoginGame)
  // optional string accountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->accountname(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:csLoginGame)
}

::google::protobuf::uint8* csLoginGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:csLoginGame)
  // optional string accountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accountname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csLoginGame)
  return target;
}

int csLoginGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string accountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csLoginGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csLoginGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csLoginGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csLoginGame::MergeFrom(const csLoginGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csLoginGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csLoginGame::CopyFrom(const csLoginGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csLoginGame::IsInitialized() const {

  return true;
}

void csLoginGame::Swap(csLoginGame* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csLoginGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csLoginGame_descriptor_;
  metadata.reflection = csLoginGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scLoginGame::kResultFieldNumber;
#endif  // !_MSC_VER

scLoginGame::scLoginGame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scLoginGame)
}

void scLoginGame::InitAsDefaultInstance() {
}

scLoginGame::scLoginGame(const scLoginGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scLoginGame)
}

void scLoginGame::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scLoginGame::~scLoginGame() {
  // @@protoc_insertion_point(destructor:scLoginGame)
  SharedDtor();
}

void scLoginGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scLoginGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scLoginGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scLoginGame_descriptor_;
}

const scLoginGame& scLoginGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

scLoginGame* scLoginGame::default_instance_ = NULL;

scLoginGame* scLoginGame::New() const {
  return new scLoginGame;
}

void scLoginGame::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scLoginGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scLoginGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scLoginGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scLoginGame)
  return false;
#undef DO_
}

void scLoginGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scLoginGame)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scLoginGame)
}

::google::protobuf::uint8* scLoginGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scLoginGame)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scLoginGame)
  return target;
}

int scLoginGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scLoginGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scLoginGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scLoginGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scLoginGame::MergeFrom(const scLoginGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scLoginGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scLoginGame::CopyFrom(const scLoginGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scLoginGame::IsInitialized() const {

  return true;
}

void scLoginGame::Swap(scLoginGame* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scLoginGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scLoginGame_descriptor_;
  metadata.reflection = scLoginGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csSelectServer::kIdFieldNumber;
#endif  // !_MSC_VER

csSelectServer::csSelectServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csSelectServer)
}

void csSelectServer::InitAsDefaultInstance() {
}

csSelectServer::csSelectServer(const csSelectServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csSelectServer)
}

void csSelectServer::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csSelectServer::~csSelectServer() {
  // @@protoc_insertion_point(destructor:csSelectServer)
  SharedDtor();
}

void csSelectServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void csSelectServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csSelectServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csSelectServer_descriptor_;
}

const csSelectServer& csSelectServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

csSelectServer* csSelectServer::default_instance_ = NULL;

csSelectServer* csSelectServer::New() const {
  return new csSelectServer;
}

void csSelectServer::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csSelectServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:csSelectServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csSelectServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csSelectServer)
  return false;
#undef DO_
}

void csSelectServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csSelectServer)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:csSelectServer)
}

::google::protobuf::uint8* csSelectServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:csSelectServer)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csSelectServer)
  return target;
}

int csSelectServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csSelectServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csSelectServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csSelectServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csSelectServer::MergeFrom(const csSelectServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csSelectServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csSelectServer::CopyFrom(const csSelectServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csSelectServer::IsInitialized() const {

  return true;
}

void csSelectServer::Swap(csSelectServer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csSelectServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csSelectServer_descriptor_;
  metadata.reflection = csSelectServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scSelectServer::kResultFieldNumber;
const int scSelectServer::kActionFieldNumber;
#endif  // !_MSC_VER

scSelectServer::scSelectServer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scSelectServer)
}

void scSelectServer::InitAsDefaultInstance() {
}

scSelectServer::scSelectServer(const scSelectServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scSelectServer)
}

void scSelectServer::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  action_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scSelectServer::~scSelectServer() {
  // @@protoc_insertion_point(destructor:scSelectServer)
  SharedDtor();
}

void scSelectServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scSelectServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scSelectServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scSelectServer_descriptor_;
}

const scSelectServer& scSelectServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

scSelectServer* scSelectServer::default_instance_ = NULL;

scSelectServer* scSelectServer::New() const {
  return new scSelectServer;
}

void scSelectServer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<scSelectServer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(result_, action_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scSelectServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scSelectServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // optional uint32 action = 2;
      case 2: {
        if (tag == 16) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scSelectServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scSelectServer)
  return false;
#undef DO_
}

void scSelectServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scSelectServer)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scSelectServer)
}

::google::protobuf::uint8* scSelectServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scSelectServer)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scSelectServer)
  return target;
}

int scSelectServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scSelectServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scSelectServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scSelectServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scSelectServer::MergeFrom(const scSelectServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scSelectServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scSelectServer::CopyFrom(const scSelectServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scSelectServer::IsInitialized() const {

  return true;
}

void scSelectServer::Swap(scSelectServer* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scSelectServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scSelectServer_descriptor_;
  metadata.reflection = scSelectServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int csCreateRole::kNameFieldNumber;
const int csCreateRole::kSexFieldNumber;
const int csCreateRole::kProfessionFieldNumber;
#endif  // !_MSC_VER

csCreateRole::csCreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:csCreateRole)
}

void csCreateRole::InitAsDefaultInstance() {
}

csCreateRole::csCreateRole(const csCreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:csCreateRole)
}

void csCreateRole::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0u;
  profession_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

csCreateRole::~csCreateRole() {
  // @@protoc_insertion_point(destructor:csCreateRole)
  SharedDtor();
}

void csCreateRole::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void csCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* csCreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return csCreateRole_descriptor_;
}

const csCreateRole& csCreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

csCreateRole* csCreateRole::default_instance_ = NULL;

csCreateRole* csCreateRole::New() const {
  return new csCreateRole;
}

void csCreateRole::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<csCreateRole*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(sex_, profession_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool csCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:csCreateRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 2;
      case 2: {
        if (tag == 16) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 3;
      case 3: {
        if (tag == 24) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:csCreateRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:csCreateRole)
  return false;
#undef DO_
}

void csCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:csCreateRole)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sex(), output);
  }

  // optional uint32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:csCreateRole)
}

::google::protobuf::uint8* csCreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:csCreateRole)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sex(), target);
  }

  // optional uint32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csCreateRole)
  return target;
}

int csCreateRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void csCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const csCreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const csCreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void csCreateRole::MergeFrom(const csCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void csCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void csCreateRole::CopyFrom(const csCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool csCreateRole::IsInitialized() const {

  return true;
}

void csCreateRole::Swap(csCreateRole* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata csCreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = csCreateRole_descriptor_;
  metadata.reflection = csCreateRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int scCreateRole::kResultFieldNumber;
#endif  // !_MSC_VER

scCreateRole::scCreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scCreateRole)
}

void scCreateRole::InitAsDefaultInstance() {
}

scCreateRole::scCreateRole(const scCreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scCreateRole)
}

void scCreateRole::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

scCreateRole::~scCreateRole() {
  // @@protoc_insertion_point(destructor:scCreateRole)
  SharedDtor();
}

void scCreateRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void scCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* scCreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return scCreateRole_descriptor_;
}

const scCreateRole& scCreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  return *default_instance_;
}

scCreateRole* scCreateRole::default_instance_ = NULL;

scCreateRole* scCreateRole::New() const {
  return new scCreateRole;
}

void scCreateRole::Clear() {
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool scCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scCreateRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scCreateRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scCreateRole)
  return false;
#undef DO_
}

void scCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scCreateRole)
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scCreateRole)
}

::google::protobuf::uint8* scCreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scCreateRole)
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scCreateRole)
  return target;
}

int scCreateRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void scCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const scCreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const scCreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void scCreateRole::MergeFrom(const scCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void scCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scCreateRole::CopyFrom(const scCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scCreateRole::IsInitialized() const {

  return true;
}

void scCreateRole::Swap(scCreateRole* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata scCreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = scCreateRole_descriptor_;
  metadata.reflection = scCreateRole_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
