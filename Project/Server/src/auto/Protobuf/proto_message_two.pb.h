// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_message_two.proto

#ifndef PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED
#define PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto_struct.pb.h"
// @@protoc_insertion_point(includes)

namespace xk_protobuf_data {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
void protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto();
void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

class csChatData;
class csCreateRole;
class csEnterMap;
class csLoginGame;
class csRegisterAccount;
class csSelectRole;
class csSelectServer;
class scChatData;
class scCreateRole;
class scEnterMap;
class scLoginGame;
class scRegisterAccount;
class scSelectRole;
class scSelectServer;

// ===================================================================

class csChatData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.csChatData) */ {
 public:
  csChatData();
  virtual ~csChatData();

  csChatData(const csChatData& from);

  inline csChatData& operator=(const csChatData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csChatData& default_instance();

  static const csChatData* internal_default_instance();

  void Swap(csChatData* other);

  // implements Message ----------------------------------------------

  inline csChatData* New() const { return New(NULL); }

  csChatData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csChatData& from);
  void MergeFrom(const csChatData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(csChatData* other);
  void UnsafeMergeFrom(const csChatData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channelId = 1;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // optional string talkMsg = 2;
  void clear_talkmsg();
  static const int kTalkMsgFieldNumber = 2;
  const ::std::string& talkmsg() const;
  void set_talkmsg(const ::std::string& value);
  void set_talkmsg(const char* value);
  void set_talkmsg(const char* value, size_t size);
  ::std::string* mutable_talkmsg();
  ::std::string* release_talkmsg();
  void set_allocated_talkmsg(::std::string* talkmsg);

  // optional uint64 otherId = 3;
  void clear_otherid();
  static const int kOtherIdFieldNumber = 3;
  ::google::protobuf::uint64 otherid() const;
  void set_otherid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.csChatData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr talkmsg_;
  ::google::protobuf::uint64 otherid_;
  ::google::protobuf::uint32 channelid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<csChatData> csChatData_default_instance_;

// -------------------------------------------------------------------

class scChatData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.scChatData) */ {
 public:
  scChatData();
  virtual ~scChatData();

  scChatData(const scChatData& from);

  inline scChatData& operator=(const scChatData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scChatData& default_instance();

  static const scChatData* internal_default_instance();

  void Swap(scChatData* other);

  // implements Message ----------------------------------------------

  inline scChatData* New() const { return New(NULL); }

  scChatData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scChatData& from);
  void MergeFrom(const scChatData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(scChatData* other);
  void UnsafeMergeFrom(const scChatData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional .xk_protobuf_data.struct_ChatInfo chatInfo = 2;
  bool has_chatinfo() const;
  void clear_chatinfo();
  static const int kChatInfoFieldNumber = 2;
  const ::xk_protobuf_data::struct_ChatInfo& chatinfo() const;
  ::xk_protobuf_data::struct_ChatInfo* mutable_chatinfo();
  ::xk_protobuf_data::struct_ChatInfo* release_chatinfo();
  void set_allocated_chatinfo(::xk_protobuf_data::struct_ChatInfo* chatinfo);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.scChatData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xk_protobuf_data::struct_ChatInfo* chatinfo_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<scChatData> scChatData_default_instance_;

// -------------------------------------------------------------------

class csRegisterAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.csRegisterAccount) */ {
 public:
  csRegisterAccount();
  virtual ~csRegisterAccount();

  csRegisterAccount(const csRegisterAccount& from);

  inline csRegisterAccount& operator=(const csRegisterAccount& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csRegisterAccount& default_instance();

  static const csRegisterAccount* internal_default_instance();

  void Swap(csRegisterAccount* other);

  // implements Message ----------------------------------------------

  inline csRegisterAccount* New() const { return New(NULL); }

  csRegisterAccount* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csRegisterAccount& from);
  void MergeFrom(const csRegisterAccount& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(csRegisterAccount* other);
  void UnsafeMergeFrom(const csRegisterAccount& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string accountName = 1;
  void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  const ::std::string& accountname() const;
  void set_accountname(const ::std::string& value);
  void set_accountname(const char* value);
  void set_accountname(const char* value, size_t size);
  ::std::string* mutable_accountname();
  ::std::string* release_accountname();
  void set_allocated_accountname(::std::string* accountname);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string repeatPassword = 3;
  void clear_repeatpassword();
  static const int kRepeatPasswordFieldNumber = 3;
  const ::std::string& repeatpassword() const;
  void set_repeatpassword(const ::std::string& value);
  void set_repeatpassword(const char* value);
  void set_repeatpassword(const char* value, size_t size);
  ::std::string* mutable_repeatpassword();
  ::std::string* release_repeatpassword();
  void set_allocated_repeatpassword(::std::string* repeatpassword);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.csRegisterAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountname_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr repeatpassword_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<csRegisterAccount> csRegisterAccount_default_instance_;

// -------------------------------------------------------------------

class scRegisterAccount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.scRegisterAccount) */ {
 public:
  scRegisterAccount();
  virtual ~scRegisterAccount();

  scRegisterAccount(const scRegisterAccount& from);

  inline scRegisterAccount& operator=(const scRegisterAccount& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scRegisterAccount& default_instance();

  static const scRegisterAccount* internal_default_instance();

  void Swap(scRegisterAccount* other);

  // implements Message ----------------------------------------------

  inline scRegisterAccount* New() const { return New(NULL); }

  scRegisterAccount* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scRegisterAccount& from);
  void MergeFrom(const scRegisterAccount& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(scRegisterAccount* other);
  void UnsafeMergeFrom(const scRegisterAccount& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.scRegisterAccount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<scRegisterAccount> scRegisterAccount_default_instance_;

// -------------------------------------------------------------------

class csLoginGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.csLoginGame) */ {
 public:
  csLoginGame();
  virtual ~csLoginGame();

  csLoginGame(const csLoginGame& from);

  inline csLoginGame& operator=(const csLoginGame& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csLoginGame& default_instance();

  static const csLoginGame* internal_default_instance();

  void Swap(csLoginGame* other);

  // implements Message ----------------------------------------------

  inline csLoginGame* New() const { return New(NULL); }

  csLoginGame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csLoginGame& from);
  void MergeFrom(const csLoginGame& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(csLoginGame* other);
  void UnsafeMergeFrom(const csLoginGame& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string accountName = 1;
  void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  const ::std::string& accountname() const;
  void set_accountname(const ::std::string& value);
  void set_accountname(const char* value);
  void set_accountname(const char* value, size_t size);
  ::std::string* mutable_accountname();
  ::std::string* release_accountname();
  void set_allocated_accountname(::std::string* accountname);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.csLoginGame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accountname_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<csLoginGame> csLoginGame_default_instance_;

// -------------------------------------------------------------------

class scLoginGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.scLoginGame) */ {
 public:
  scLoginGame();
  virtual ~scLoginGame();

  scLoginGame(const scLoginGame& from);

  inline scLoginGame& operator=(const scLoginGame& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scLoginGame& default_instance();

  static const scLoginGame* internal_default_instance();

  void Swap(scLoginGame* other);

  // implements Message ----------------------------------------------

  inline scLoginGame* New() const { return New(NULL); }

  scLoginGame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scLoginGame& from);
  void MergeFrom(const scLoginGame& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(scLoginGame* other);
  void UnsafeMergeFrom(const scLoginGame& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional uint32 lastSelecServerId = 2;
  void clear_lastselecserverid();
  static const int kLastSelecServerIdFieldNumber = 2;
  ::google::protobuf::uint32 lastselecserverid() const;
  void set_lastselecserverid(::google::protobuf::uint32 value);

  // repeated uint32 beforeLoginRecordServerList = 3;
  int beforeloginrecordserverlist_size() const;
  void clear_beforeloginrecordserverlist();
  static const int kBeforeLoginRecordServerListFieldNumber = 3;
  ::google::protobuf::uint32 beforeloginrecordserverlist(int index) const;
  void set_beforeloginrecordserverlist(int index, ::google::protobuf::uint32 value);
  void add_beforeloginrecordserverlist(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      beforeloginrecordserverlist() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_beforeloginrecordserverlist();

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.scLoginGame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > beforeloginrecordserverlist_;
  mutable int _beforeloginrecordserverlist_cached_byte_size_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 lastselecserverid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<scLoginGame> scLoginGame_default_instance_;

// -------------------------------------------------------------------

class csSelectServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.csSelectServer) */ {
 public:
  csSelectServer();
  virtual ~csSelectServer();

  csSelectServer(const csSelectServer& from);

  inline csSelectServer& operator=(const csSelectServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csSelectServer& default_instance();

  static const csSelectServer* internal_default_instance();

  void Swap(csSelectServer* other);

  // implements Message ----------------------------------------------

  inline csSelectServer* New() const { return New(NULL); }

  csSelectServer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csSelectServer& from);
  void MergeFrom(const csSelectServer& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(csSelectServer* other);
  void UnsafeMergeFrom(const csSelectServer& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.csSelectServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<csSelectServer> csSelectServer_default_instance_;

// -------------------------------------------------------------------

class scSelectServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.scSelectServer) */ {
 public:
  scSelectServer();
  virtual ~scSelectServer();

  scSelectServer(const scSelectServer& from);

  inline scSelectServer& operator=(const scSelectServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scSelectServer& default_instance();

  static const scSelectServer* internal_default_instance();

  void Swap(scSelectServer* other);

  // implements Message ----------------------------------------------

  inline scSelectServer* New() const { return New(NULL); }

  scSelectServer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scSelectServer& from);
  void MergeFrom(const scSelectServer& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(scSelectServer* other);
  void UnsafeMergeFrom(const scSelectServer& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional uint64 LastSelectRoleId = 2;
  void clear_lastselectroleid();
  static const int kLastSelectRoleIdFieldNumber = 2;
  ::google::protobuf::uint64 lastselectroleid() const;
  void set_lastselectroleid(::google::protobuf::uint64 value);

  // repeated .xk_protobuf_data.struct_PlayerDetailInfo roleList = 3;
  int rolelist_size() const;
  void clear_rolelist();
  static const int kRoleListFieldNumber = 3;
  const ::xk_protobuf_data::struct_PlayerDetailInfo& rolelist(int index) const;
  ::xk_protobuf_data::struct_PlayerDetailInfo* mutable_rolelist(int index);
  ::xk_protobuf_data::struct_PlayerDetailInfo* add_rolelist();
  ::google::protobuf::RepeatedPtrField< ::xk_protobuf_data::struct_PlayerDetailInfo >*
      mutable_rolelist();
  const ::google::protobuf::RepeatedPtrField< ::xk_protobuf_data::struct_PlayerDetailInfo >&
      rolelist() const;

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.scSelectServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::xk_protobuf_data::struct_PlayerDetailInfo > rolelist_;
  ::google::protobuf::uint64 lastselectroleid_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<scSelectServer> scSelectServer_default_instance_;

// -------------------------------------------------------------------

class csCreateRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.csCreateRole) */ {
 public:
  csCreateRole();
  virtual ~csCreateRole();

  csCreateRole(const csCreateRole& from);

  inline csCreateRole& operator=(const csCreateRole& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csCreateRole& default_instance();

  static const csCreateRole* internal_default_instance();

  void Swap(csCreateRole* other);

  // implements Message ----------------------------------------------

  inline csCreateRole* New() const { return New(NULL); }

  csCreateRole* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csCreateRole& from);
  void MergeFrom(const csCreateRole& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(csCreateRole* other);
  void UnsafeMergeFrom(const csCreateRole& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 sex = 2;
  void clear_sex();
  static const int kSexFieldNumber = 2;
  ::google::protobuf::uint32 sex() const;
  void set_sex(::google::protobuf::uint32 value);

  // optional uint32 profession = 3;
  void clear_profession();
  static const int kProfessionFieldNumber = 3;
  ::google::protobuf::uint32 profession() const;
  void set_profession(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.csCreateRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 profession_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<csCreateRole> csCreateRole_default_instance_;

// -------------------------------------------------------------------

class scCreateRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.scCreateRole) */ {
 public:
  scCreateRole();
  virtual ~scCreateRole();

  scCreateRole(const scCreateRole& from);

  inline scCreateRole& operator=(const scCreateRole& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scCreateRole& default_instance();

  static const scCreateRole* internal_default_instance();

  void Swap(scCreateRole* other);

  // implements Message ----------------------------------------------

  inline scCreateRole* New() const { return New(NULL); }

  scCreateRole* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scCreateRole& from);
  void MergeFrom(const scCreateRole& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(scCreateRole* other);
  void UnsafeMergeFrom(const scCreateRole& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // optional .xk_protobuf_data.struct_PlayerDetailInfo role = 2;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 2;
  const ::xk_protobuf_data::struct_PlayerDetailInfo& role() const;
  ::xk_protobuf_data::struct_PlayerDetailInfo* mutable_role();
  ::xk_protobuf_data::struct_PlayerDetailInfo* release_role();
  void set_allocated_role(::xk_protobuf_data::struct_PlayerDetailInfo* role);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.scCreateRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::xk_protobuf_data::struct_PlayerDetailInfo* role_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<scCreateRole> scCreateRole_default_instance_;

// -------------------------------------------------------------------

class csSelectRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.csSelectRole) */ {
 public:
  csSelectRole();
  virtual ~csSelectRole();

  csSelectRole(const csSelectRole& from);

  inline csSelectRole& operator=(const csSelectRole& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csSelectRole& default_instance();

  static const csSelectRole* internal_default_instance();

  void Swap(csSelectRole* other);

  // implements Message ----------------------------------------------

  inline csSelectRole* New() const { return New(NULL); }

  csSelectRole* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csSelectRole& from);
  void MergeFrom(const csSelectRole& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(csSelectRole* other);
  void UnsafeMergeFrom(const csSelectRole& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 roleId = 1;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::uint64 roleid() const;
  void set_roleid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.csSelectRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roleid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<csSelectRole> csSelectRole_default_instance_;

// -------------------------------------------------------------------

class scSelectRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.scSelectRole) */ {
 public:
  scSelectRole();
  virtual ~scSelectRole();

  scSelectRole(const scSelectRole& from);

  inline scSelectRole& operator=(const scSelectRole& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scSelectRole& default_instance();

  static const scSelectRole* internal_default_instance();

  void Swap(scSelectRole* other);

  // implements Message ----------------------------------------------

  inline scSelectRole* New() const { return New(NULL); }

  scSelectRole* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scSelectRole& from);
  void MergeFrom(const scSelectRole& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(scSelectRole* other);
  void UnsafeMergeFrom(const scSelectRole& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.scSelectRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<scSelectRole> scSelectRole_default_instance_;

// -------------------------------------------------------------------

class csEnterMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.csEnterMap) */ {
 public:
  csEnterMap();
  virtual ~csEnterMap();

  csEnterMap(const csEnterMap& from);

  inline csEnterMap& operator=(const csEnterMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csEnterMap& default_instance();

  static const csEnterMap* internal_default_instance();

  void Swap(csEnterMap* other);

  // implements Message ----------------------------------------------

  inline csEnterMap* New() const { return New(NULL); }

  csEnterMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csEnterMap& from);
  void MergeFrom(const csEnterMap& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(csEnterMap* other);
  void UnsafeMergeFrom(const csEnterMap& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 configId = 1;
  void clear_configid();
  static const int kConfigIdFieldNumber = 1;
  ::google::protobuf::uint32 configid() const;
  void set_configid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.csEnterMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 configid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<csEnterMap> csEnterMap_default_instance_;

// -------------------------------------------------------------------

class scEnterMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xk_protobuf_data.scEnterMap) */ {
 public:
  scEnterMap();
  virtual ~scEnterMap();

  scEnterMap(const scEnterMap& from);

  inline scEnterMap& operator=(const scEnterMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scEnterMap& default_instance();

  static const scEnterMap* internal_default_instance();

  void Swap(scEnterMap* other);

  // implements Message ----------------------------------------------

  inline scEnterMap* New() const { return New(NULL); }

  scEnterMap* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scEnterMap& from);
  void MergeFrom(const scEnterMap& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(scEnterMap* other);
  void UnsafeMergeFrom(const scEnterMap& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xk_protobuf_data.scEnterMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_proto_5fmessage_5ftwo_2eproto_impl();
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto_impl();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<scEnterMap> scEnterMap_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// csChatData

// optional uint32 channelId = 1;
inline void csChatData::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 csChatData::channelid() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csChatData.channelId)
  return channelid_;
}
inline void csChatData::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csChatData.channelId)
}

// optional string talkMsg = 2;
inline void csChatData::clear_talkmsg() {
  talkmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& csChatData::talkmsg() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csChatData.talkMsg)
  return talkmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csChatData::set_talkmsg(const ::std::string& value) {
  
  talkmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csChatData.talkMsg)
}
inline void csChatData::set_talkmsg(const char* value) {
  
  talkmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.csChatData.talkMsg)
}
inline void csChatData::set_talkmsg(const char* value, size_t size) {
  
  talkmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.csChatData.talkMsg)
}
inline ::std::string* csChatData::mutable_talkmsg() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.csChatData.talkMsg)
  return talkmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* csChatData::release_talkmsg() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.csChatData.talkMsg)
  
  return talkmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csChatData::set_allocated_talkmsg(::std::string* talkmsg) {
  if (talkmsg != NULL) {
    
  } else {
    
  }
  talkmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talkmsg);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.csChatData.talkMsg)
}

// optional uint64 otherId = 3;
inline void csChatData::clear_otherid() {
  otherid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 csChatData::otherid() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csChatData.otherId)
  return otherid_;
}
inline void csChatData::set_otherid(::google::protobuf::uint64 value) {
  
  otherid_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csChatData.otherId)
}

inline const csChatData* csChatData::internal_default_instance() {
  return &csChatData_default_instance_.get();
}
// -------------------------------------------------------------------

// scChatData

// optional uint32 result = 1;
inline void scChatData::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 scChatData::result() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scChatData.result)
  return result_;
}
inline void scChatData::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.scChatData.result)
}

// optional .xk_protobuf_data.struct_ChatInfo chatInfo = 2;
inline bool scChatData::has_chatinfo() const {
  return this != internal_default_instance() && chatinfo_ != NULL;
}
inline void scChatData::clear_chatinfo() {
  if (GetArenaNoVirtual() == NULL && chatinfo_ != NULL) delete chatinfo_;
  chatinfo_ = NULL;
}
inline const ::xk_protobuf_data::struct_ChatInfo& scChatData::chatinfo() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scChatData.chatInfo)
  return chatinfo_ != NULL ? *chatinfo_
                         : *::xk_protobuf_data::struct_ChatInfo::internal_default_instance();
}
inline ::xk_protobuf_data::struct_ChatInfo* scChatData::mutable_chatinfo() {
  
  if (chatinfo_ == NULL) {
    chatinfo_ = new ::xk_protobuf_data::struct_ChatInfo;
  }
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.scChatData.chatInfo)
  return chatinfo_;
}
inline ::xk_protobuf_data::struct_ChatInfo* scChatData::release_chatinfo() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.scChatData.chatInfo)
  
  ::xk_protobuf_data::struct_ChatInfo* temp = chatinfo_;
  chatinfo_ = NULL;
  return temp;
}
inline void scChatData::set_allocated_chatinfo(::xk_protobuf_data::struct_ChatInfo* chatinfo) {
  delete chatinfo_;
  chatinfo_ = chatinfo;
  if (chatinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.scChatData.chatInfo)
}

inline const scChatData* scChatData::internal_default_instance() {
  return &scChatData_default_instance_.get();
}
// -------------------------------------------------------------------

// csRegisterAccount

// optional string accountName = 1;
inline void csRegisterAccount::clear_accountname() {
  accountname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& csRegisterAccount::accountname() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csRegisterAccount.accountName)
  return accountname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csRegisterAccount::set_accountname(const ::std::string& value) {
  
  accountname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csRegisterAccount.accountName)
}
inline void csRegisterAccount::set_accountname(const char* value) {
  
  accountname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.csRegisterAccount.accountName)
}
inline void csRegisterAccount::set_accountname(const char* value, size_t size) {
  
  accountname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.csRegisterAccount.accountName)
}
inline ::std::string* csRegisterAccount::mutable_accountname() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.csRegisterAccount.accountName)
  return accountname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* csRegisterAccount::release_accountname() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.csRegisterAccount.accountName)
  
  return accountname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csRegisterAccount::set_allocated_accountname(::std::string* accountname) {
  if (accountname != NULL) {
    
  } else {
    
  }
  accountname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountname);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.csRegisterAccount.accountName)
}

// optional string password = 2;
inline void csRegisterAccount::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& csRegisterAccount::password() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csRegisterAccount.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csRegisterAccount::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csRegisterAccount.password)
}
inline void csRegisterAccount::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.csRegisterAccount.password)
}
inline void csRegisterAccount::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.csRegisterAccount.password)
}
inline ::std::string* csRegisterAccount::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.csRegisterAccount.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* csRegisterAccount::release_password() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.csRegisterAccount.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csRegisterAccount::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.csRegisterAccount.password)
}

// optional string repeatPassword = 3;
inline void csRegisterAccount::clear_repeatpassword() {
  repeatpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& csRegisterAccount::repeatpassword() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csRegisterAccount.repeatPassword)
  return repeatpassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csRegisterAccount::set_repeatpassword(const ::std::string& value) {
  
  repeatpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csRegisterAccount.repeatPassword)
}
inline void csRegisterAccount::set_repeatpassword(const char* value) {
  
  repeatpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.csRegisterAccount.repeatPassword)
}
inline void csRegisterAccount::set_repeatpassword(const char* value, size_t size) {
  
  repeatpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.csRegisterAccount.repeatPassword)
}
inline ::std::string* csRegisterAccount::mutable_repeatpassword() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.csRegisterAccount.repeatPassword)
  return repeatpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* csRegisterAccount::release_repeatpassword() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.csRegisterAccount.repeatPassword)
  
  return repeatpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csRegisterAccount::set_allocated_repeatpassword(::std::string* repeatpassword) {
  if (repeatpassword != NULL) {
    
  } else {
    
  }
  repeatpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), repeatpassword);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.csRegisterAccount.repeatPassword)
}

inline const csRegisterAccount* csRegisterAccount::internal_default_instance() {
  return &csRegisterAccount_default_instance_.get();
}
// -------------------------------------------------------------------

// scRegisterAccount

// optional uint32 result = 1;
inline void scRegisterAccount::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 scRegisterAccount::result() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scRegisterAccount.result)
  return result_;
}
inline void scRegisterAccount::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.scRegisterAccount.result)
}

inline const scRegisterAccount* scRegisterAccount::internal_default_instance() {
  return &scRegisterAccount_default_instance_.get();
}
// -------------------------------------------------------------------

// csLoginGame

// optional string accountName = 1;
inline void csLoginGame::clear_accountname() {
  accountname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& csLoginGame::accountname() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csLoginGame.accountName)
  return accountname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csLoginGame::set_accountname(const ::std::string& value) {
  
  accountname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csLoginGame.accountName)
}
inline void csLoginGame::set_accountname(const char* value) {
  
  accountname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.csLoginGame.accountName)
}
inline void csLoginGame::set_accountname(const char* value, size_t size) {
  
  accountname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.csLoginGame.accountName)
}
inline ::std::string* csLoginGame::mutable_accountname() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.csLoginGame.accountName)
  return accountname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* csLoginGame::release_accountname() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.csLoginGame.accountName)
  
  return accountname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csLoginGame::set_allocated_accountname(::std::string* accountname) {
  if (accountname != NULL) {
    
  } else {
    
  }
  accountname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountname);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.csLoginGame.accountName)
}

// optional string password = 2;
inline void csLoginGame::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& csLoginGame::password() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csLoginGame.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csLoginGame::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csLoginGame.password)
}
inline void csLoginGame::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.csLoginGame.password)
}
inline void csLoginGame::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.csLoginGame.password)
}
inline ::std::string* csLoginGame::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.csLoginGame.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* csLoginGame::release_password() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.csLoginGame.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csLoginGame::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.csLoginGame.password)
}

inline const csLoginGame* csLoginGame::internal_default_instance() {
  return &csLoginGame_default_instance_.get();
}
// -------------------------------------------------------------------

// scLoginGame

// optional uint32 result = 1;
inline void scLoginGame::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 scLoginGame::result() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scLoginGame.result)
  return result_;
}
inline void scLoginGame::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.scLoginGame.result)
}

// optional uint32 lastSelecServerId = 2;
inline void scLoginGame::clear_lastselecserverid() {
  lastselecserverid_ = 0u;
}
inline ::google::protobuf::uint32 scLoginGame::lastselecserverid() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scLoginGame.lastSelecServerId)
  return lastselecserverid_;
}
inline void scLoginGame::set_lastselecserverid(::google::protobuf::uint32 value) {
  
  lastselecserverid_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.scLoginGame.lastSelecServerId)
}

// repeated uint32 beforeLoginRecordServerList = 3;
inline int scLoginGame::beforeloginrecordserverlist_size() const {
  return beforeloginrecordserverlist_.size();
}
inline void scLoginGame::clear_beforeloginrecordserverlist() {
  beforeloginrecordserverlist_.Clear();
}
inline ::google::protobuf::uint32 scLoginGame::beforeloginrecordserverlist(int index) const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scLoginGame.beforeLoginRecordServerList)
  return beforeloginrecordserverlist_.Get(index);
}
inline void scLoginGame::set_beforeloginrecordserverlist(int index, ::google::protobuf::uint32 value) {
  beforeloginrecordserverlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.scLoginGame.beforeLoginRecordServerList)
}
inline void scLoginGame::add_beforeloginrecordserverlist(::google::protobuf::uint32 value) {
  beforeloginrecordserverlist_.Add(value);
  // @@protoc_insertion_point(field_add:xk_protobuf_data.scLoginGame.beforeLoginRecordServerList)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
scLoginGame::beforeloginrecordserverlist() const {
  // @@protoc_insertion_point(field_list:xk_protobuf_data.scLoginGame.beforeLoginRecordServerList)
  return beforeloginrecordserverlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
scLoginGame::mutable_beforeloginrecordserverlist() {
  // @@protoc_insertion_point(field_mutable_list:xk_protobuf_data.scLoginGame.beforeLoginRecordServerList)
  return &beforeloginrecordserverlist_;
}

inline const scLoginGame* scLoginGame::internal_default_instance() {
  return &scLoginGame_default_instance_.get();
}
// -------------------------------------------------------------------

// csSelectServer

// optional uint32 id = 1;
inline void csSelectServer::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 csSelectServer::id() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csSelectServer.id)
  return id_;
}
inline void csSelectServer::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csSelectServer.id)
}

inline const csSelectServer* csSelectServer::internal_default_instance() {
  return &csSelectServer_default_instance_.get();
}
// -------------------------------------------------------------------

// scSelectServer

// optional uint32 result = 1;
inline void scSelectServer::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 scSelectServer::result() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scSelectServer.result)
  return result_;
}
inline void scSelectServer::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.scSelectServer.result)
}

// optional uint64 LastSelectRoleId = 2;
inline void scSelectServer::clear_lastselectroleid() {
  lastselectroleid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 scSelectServer::lastselectroleid() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scSelectServer.LastSelectRoleId)
  return lastselectroleid_;
}
inline void scSelectServer::set_lastselectroleid(::google::protobuf::uint64 value) {
  
  lastselectroleid_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.scSelectServer.LastSelectRoleId)
}

// repeated .xk_protobuf_data.struct_PlayerDetailInfo roleList = 3;
inline int scSelectServer::rolelist_size() const {
  return rolelist_.size();
}
inline void scSelectServer::clear_rolelist() {
  rolelist_.Clear();
}
inline const ::xk_protobuf_data::struct_PlayerDetailInfo& scSelectServer::rolelist(int index) const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scSelectServer.roleList)
  return rolelist_.Get(index);
}
inline ::xk_protobuf_data::struct_PlayerDetailInfo* scSelectServer::mutable_rolelist(int index) {
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.scSelectServer.roleList)
  return rolelist_.Mutable(index);
}
inline ::xk_protobuf_data::struct_PlayerDetailInfo* scSelectServer::add_rolelist() {
  // @@protoc_insertion_point(field_add:xk_protobuf_data.scSelectServer.roleList)
  return rolelist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xk_protobuf_data::struct_PlayerDetailInfo >*
scSelectServer::mutable_rolelist() {
  // @@protoc_insertion_point(field_mutable_list:xk_protobuf_data.scSelectServer.roleList)
  return &rolelist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xk_protobuf_data::struct_PlayerDetailInfo >&
scSelectServer::rolelist() const {
  // @@protoc_insertion_point(field_list:xk_protobuf_data.scSelectServer.roleList)
  return rolelist_;
}

inline const scSelectServer* scSelectServer::internal_default_instance() {
  return &scSelectServer_default_instance_.get();
}
// -------------------------------------------------------------------

// csCreateRole

// optional string name = 1;
inline void csCreateRole::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& csCreateRole::name() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csCreateRole.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csCreateRole::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csCreateRole.name)
}
inline void csCreateRole::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.csCreateRole.name)
}
inline void csCreateRole::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.csCreateRole.name)
}
inline ::std::string* csCreateRole::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.csCreateRole.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* csCreateRole::release_name() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.csCreateRole.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void csCreateRole::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.csCreateRole.name)
}

// optional uint32 sex = 2;
inline void csCreateRole::clear_sex() {
  sex_ = 0u;
}
inline ::google::protobuf::uint32 csCreateRole::sex() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csCreateRole.sex)
  return sex_;
}
inline void csCreateRole::set_sex(::google::protobuf::uint32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csCreateRole.sex)
}

// optional uint32 profession = 3;
inline void csCreateRole::clear_profession() {
  profession_ = 0u;
}
inline ::google::protobuf::uint32 csCreateRole::profession() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csCreateRole.profession)
  return profession_;
}
inline void csCreateRole::set_profession(::google::protobuf::uint32 value) {
  
  profession_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csCreateRole.profession)
}

inline const csCreateRole* csCreateRole::internal_default_instance() {
  return &csCreateRole_default_instance_.get();
}
// -------------------------------------------------------------------

// scCreateRole

// optional uint32 result = 1;
inline void scCreateRole::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 scCreateRole::result() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scCreateRole.result)
  return result_;
}
inline void scCreateRole::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.scCreateRole.result)
}

// optional .xk_protobuf_data.struct_PlayerDetailInfo role = 2;
inline bool scCreateRole::has_role() const {
  return this != internal_default_instance() && role_ != NULL;
}
inline void scCreateRole::clear_role() {
  if (GetArenaNoVirtual() == NULL && role_ != NULL) delete role_;
  role_ = NULL;
}
inline const ::xk_protobuf_data::struct_PlayerDetailInfo& scCreateRole::role() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scCreateRole.role)
  return role_ != NULL ? *role_
                         : *::xk_protobuf_data::struct_PlayerDetailInfo::internal_default_instance();
}
inline ::xk_protobuf_data::struct_PlayerDetailInfo* scCreateRole::mutable_role() {
  
  if (role_ == NULL) {
    role_ = new ::xk_protobuf_data::struct_PlayerDetailInfo;
  }
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.scCreateRole.role)
  return role_;
}
inline ::xk_protobuf_data::struct_PlayerDetailInfo* scCreateRole::release_role() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.scCreateRole.role)
  
  ::xk_protobuf_data::struct_PlayerDetailInfo* temp = role_;
  role_ = NULL;
  return temp;
}
inline void scCreateRole::set_allocated_role(::xk_protobuf_data::struct_PlayerDetailInfo* role) {
  delete role_;
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.scCreateRole.role)
}

inline const scCreateRole* scCreateRole::internal_default_instance() {
  return &scCreateRole_default_instance_.get();
}
// -------------------------------------------------------------------

// csSelectRole

// optional uint64 roleId = 1;
inline void csSelectRole::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 csSelectRole::roleid() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csSelectRole.roleId)
  return roleid_;
}
inline void csSelectRole::set_roleid(::google::protobuf::uint64 value) {
  
  roleid_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csSelectRole.roleId)
}

inline const csSelectRole* csSelectRole::internal_default_instance() {
  return &csSelectRole_default_instance_.get();
}
// -------------------------------------------------------------------

// scSelectRole

// optional uint32 result = 1;
inline void scSelectRole::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 scSelectRole::result() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scSelectRole.result)
  return result_;
}
inline void scSelectRole::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.scSelectRole.result)
}

inline const scSelectRole* scSelectRole::internal_default_instance() {
  return &scSelectRole_default_instance_.get();
}
// -------------------------------------------------------------------

// csEnterMap

// optional uint32 configId = 1;
inline void csEnterMap::clear_configid() {
  configid_ = 0u;
}
inline ::google::protobuf::uint32 csEnterMap::configid() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.csEnterMap.configId)
  return configid_;
}
inline void csEnterMap::set_configid(::google::protobuf::uint32 value) {
  
  configid_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.csEnterMap.configId)
}

inline const csEnterMap* csEnterMap::internal_default_instance() {
  return &csEnterMap_default_instance_.get();
}
// -------------------------------------------------------------------

// scEnterMap

// optional uint32 result = 1;
inline void scEnterMap::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 scEnterMap::result() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.scEnterMap.result)
  return result_;
}
inline void scEnterMap::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.scEnterMap.result)
}

inline const scEnterMap* scEnterMap::internal_default_instance() {
  return &scEnterMap_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xk_protobuf_data

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED
