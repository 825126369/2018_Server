// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_message_two.proto

#ifndef PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED
#define PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto_struct.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

class csChatData;
class scChatData;
class csRegisterAccount;
class scRegisterAccount;
class csLoginGame;
class scLoginGame;
class csSelectServer;
class scSelectServer;
class csCreateRole;
class scCreateRole;

// ===================================================================

class csChatData : public ::google::protobuf::Message {
 public:
  csChatData();
  virtual ~csChatData();

  csChatData(const csChatData& from);

  inline csChatData& operator=(const csChatData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csChatData& default_instance();

  void Swap(csChatData* other);

  // implements Message ----------------------------------------------

  csChatData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csChatData& from);
  void MergeFrom(const csChatData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 channelId = 1;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 channelid() const;
  inline void set_channelid(::google::protobuf::uint32 value);

  // optional string talkMsg = 2;
  inline bool has_talkmsg() const;
  inline void clear_talkmsg();
  static const int kTalkMsgFieldNumber = 2;
  inline const ::std::string& talkmsg() const;
  inline void set_talkmsg(const ::std::string& value);
  inline void set_talkmsg(const char* value);
  inline void set_talkmsg(const char* value, size_t size);
  inline ::std::string* mutable_talkmsg();
  inline ::std::string* release_talkmsg();
  inline void set_allocated_talkmsg(::std::string* talkmsg);

  // optional uint64 otherId = 3;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtherIdFieldNumber = 3;
  inline ::google::protobuf::uint64 otherid() const;
  inline void set_otherid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:csChatData)
 private:
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_talkmsg();
  inline void clear_has_talkmsg();
  inline void set_has_otherid();
  inline void clear_has_otherid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* talkmsg_;
  ::google::protobuf::uint64 otherid_;
  ::google::protobuf::uint32 channelid_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static csChatData* default_instance_;
};
// -------------------------------------------------------------------

class scChatData : public ::google::protobuf::Message {
 public:
  scChatData();
  virtual ~scChatData();

  scChatData(const scChatData& from);

  inline scChatData& operator=(const scChatData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scChatData& default_instance();

  void Swap(scChatData* other);

  // implements Message ----------------------------------------------

  scChatData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scChatData& from);
  void MergeFrom(const scChatData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional .struct_ChatInfo chatInfo = 2;
  inline bool has_chatinfo() const;
  inline void clear_chatinfo();
  static const int kChatInfoFieldNumber = 2;
  inline const ::struct_ChatInfo& chatinfo() const;
  inline ::struct_ChatInfo* mutable_chatinfo();
  inline ::struct_ChatInfo* release_chatinfo();
  inline void set_allocated_chatinfo(::struct_ChatInfo* chatinfo);

  // @@protoc_insertion_point(class_scope:scChatData)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_chatinfo();
  inline void clear_has_chatinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::struct_ChatInfo* chatinfo_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static scChatData* default_instance_;
};
// -------------------------------------------------------------------

class csRegisterAccount : public ::google::protobuf::Message {
 public:
  csRegisterAccount();
  virtual ~csRegisterAccount();

  csRegisterAccount(const csRegisterAccount& from);

  inline csRegisterAccount& operator=(const csRegisterAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csRegisterAccount& default_instance();

  void Swap(csRegisterAccount* other);

  // implements Message ----------------------------------------------

  csRegisterAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csRegisterAccount& from);
  void MergeFrom(const csRegisterAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string accountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string repeatPassword = 3;
  inline bool has_repeatpassword() const;
  inline void clear_repeatpassword();
  static const int kRepeatPasswordFieldNumber = 3;
  inline const ::std::string& repeatpassword() const;
  inline void set_repeatpassword(const ::std::string& value);
  inline void set_repeatpassword(const char* value);
  inline void set_repeatpassword(const char* value, size_t size);
  inline ::std::string* mutable_repeatpassword();
  inline ::std::string* release_repeatpassword();
  inline void set_allocated_repeatpassword(::std::string* repeatpassword);

  // @@protoc_insertion_point(class_scope:csRegisterAccount)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_repeatpassword();
  inline void clear_has_repeatpassword();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* accountname_;
  ::std::string* password_;
  ::std::string* repeatpassword_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static csRegisterAccount* default_instance_;
};
// -------------------------------------------------------------------

class scRegisterAccount : public ::google::protobuf::Message {
 public:
  scRegisterAccount();
  virtual ~scRegisterAccount();

  scRegisterAccount(const scRegisterAccount& from);

  inline scRegisterAccount& operator=(const scRegisterAccount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scRegisterAccount& default_instance();

  void Swap(scRegisterAccount* other);

  // implements Message ----------------------------------------------

  scRegisterAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scRegisterAccount& from);
  void MergeFrom(const scRegisterAccount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:scRegisterAccount)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static scRegisterAccount* default_instance_;
};
// -------------------------------------------------------------------

class csLoginGame : public ::google::protobuf::Message {
 public:
  csLoginGame();
  virtual ~csLoginGame();

  csLoginGame(const csLoginGame& from);

  inline csLoginGame& operator=(const csLoginGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csLoginGame& default_instance();

  void Swap(csLoginGame* other);

  // implements Message ----------------------------------------------

  csLoginGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csLoginGame& from);
  void MergeFrom(const csLoginGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string accountName = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  inline ::std::string* release_accountname();
  inline void set_allocated_accountname(::std::string* accountname);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:csLoginGame)
 private:
  inline void set_has_accountname();
  inline void clear_has_accountname();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* accountname_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static csLoginGame* default_instance_;
};
// -------------------------------------------------------------------

class scLoginGame : public ::google::protobuf::Message {
 public:
  scLoginGame();
  virtual ~scLoginGame();

  scLoginGame(const scLoginGame& from);

  inline scLoginGame& operator=(const scLoginGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scLoginGame& default_instance();

  void Swap(scLoginGame* other);

  // implements Message ----------------------------------------------

  scLoginGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scLoginGame& from);
  void MergeFrom(const scLoginGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:scLoginGame)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static scLoginGame* default_instance_;
};
// -------------------------------------------------------------------

class csSelectServer : public ::google::protobuf::Message {
 public:
  csSelectServer();
  virtual ~csSelectServer();

  csSelectServer(const csSelectServer& from);

  inline csSelectServer& operator=(const csSelectServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csSelectServer& default_instance();

  void Swap(csSelectServer* other);

  // implements Message ----------------------------------------------

  csSelectServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csSelectServer& from);
  void MergeFrom(const csSelectServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:csSelectServer)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static csSelectServer* default_instance_;
};
// -------------------------------------------------------------------

class scSelectServer : public ::google::protobuf::Message {
 public:
  scSelectServer();
  virtual ~scSelectServer();

  scSelectServer(const scSelectServer& from);

  inline scSelectServer& operator=(const scSelectServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scSelectServer& default_instance();

  void Swap(scSelectServer* other);

  // implements Message ----------------------------------------------

  scSelectServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scSelectServer& from);
  void MergeFrom(const scSelectServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::google::protobuf::uint32 action() const;
  inline void set_action(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:scSelectServer)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 action_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static scSelectServer* default_instance_;
};
// -------------------------------------------------------------------

class csCreateRole : public ::google::protobuf::Message {
 public:
  csCreateRole();
  virtual ~csCreateRole();

  csCreateRole(const csCreateRole& from);

  inline csCreateRole& operator=(const csCreateRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const csCreateRole& default_instance();

  void Swap(csCreateRole* other);

  // implements Message ----------------------------------------------

  csCreateRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const csCreateRole& from);
  void MergeFrom(const csCreateRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 profession = 3;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 3;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:csCreateRole)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_profession();
  inline void clear_has_profession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 profession_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static csCreateRole* default_instance_;
};
// -------------------------------------------------------------------

class scCreateRole : public ::google::protobuf::Message {
 public:
  scCreateRole();
  virtual ~scCreateRole();

  scCreateRole(const scCreateRole& from);

  inline scCreateRole& operator=(const scCreateRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const scCreateRole& default_instance();

  void Swap(scCreateRole* other);

  // implements Message ----------------------------------------------

  scCreateRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const scCreateRole& from);
  void MergeFrom(const scCreateRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:scCreateRole)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 result_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static scCreateRole* default_instance_;
};
// ===================================================================


// ===================================================================

// csChatData

// optional uint32 channelId = 1;
inline bool csChatData::has_channelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csChatData::set_has_channelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csChatData::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csChatData::clear_channelid() {
  channelid_ = 0u;
  clear_has_channelid();
}
inline ::google::protobuf::uint32 csChatData::channelid() const {
  // @@protoc_insertion_point(field_get:csChatData.channelId)
  return channelid_;
}
inline void csChatData::set_channelid(::google::protobuf::uint32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:csChatData.channelId)
}

// optional string talkMsg = 2;
inline bool csChatData::has_talkmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csChatData::set_has_talkmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csChatData::clear_has_talkmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csChatData::clear_talkmsg() {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_->clear();
  }
  clear_has_talkmsg();
}
inline const ::std::string& csChatData::talkmsg() const {
  // @@protoc_insertion_point(field_get:csChatData.talkMsg)
  return *talkmsg_;
}
inline void csChatData::set_talkmsg(const ::std::string& value) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(value);
  // @@protoc_insertion_point(field_set:csChatData.talkMsg)
}
inline void csChatData::set_talkmsg(const char* value) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:csChatData.talkMsg)
}
inline void csChatData::set_talkmsg(const char* value, size_t size) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csChatData.talkMsg)
}
inline ::std::string* csChatData::mutable_talkmsg() {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csChatData.talkMsg)
  return talkmsg_;
}
inline ::std::string* csChatData::release_talkmsg() {
  clear_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = talkmsg_;
    talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csChatData::set_allocated_talkmsg(::std::string* talkmsg) {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkmsg_;
  }
  if (talkmsg) {
    set_has_talkmsg();
    talkmsg_ = talkmsg;
  } else {
    clear_has_talkmsg();
    talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csChatData.talkMsg)
}

// optional uint64 otherId = 3;
inline bool csChatData::has_otherid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void csChatData::set_has_otherid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void csChatData::clear_has_otherid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void csChatData::clear_otherid() {
  otherid_ = GOOGLE_ULONGLONG(0);
  clear_has_otherid();
}
inline ::google::protobuf::uint64 csChatData::otherid() const {
  // @@protoc_insertion_point(field_get:csChatData.otherId)
  return otherid_;
}
inline void csChatData::set_otherid(::google::protobuf::uint64 value) {
  set_has_otherid();
  otherid_ = value;
  // @@protoc_insertion_point(field_set:csChatData.otherId)
}

// -------------------------------------------------------------------

// scChatData

// optional uint32 result = 1;
inline bool scChatData::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scChatData::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scChatData::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scChatData::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 scChatData::result() const {
  // @@protoc_insertion_point(field_get:scChatData.result)
  return result_;
}
inline void scChatData::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:scChatData.result)
}

// optional .struct_ChatInfo chatInfo = 2;
inline bool scChatData::has_chatinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void scChatData::set_has_chatinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void scChatData::clear_has_chatinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void scChatData::clear_chatinfo() {
  if (chatinfo_ != NULL) chatinfo_->::struct_ChatInfo::Clear();
  clear_has_chatinfo();
}
inline const ::struct_ChatInfo& scChatData::chatinfo() const {
  // @@protoc_insertion_point(field_get:scChatData.chatInfo)
  return chatinfo_ != NULL ? *chatinfo_ : *default_instance_->chatinfo_;
}
inline ::struct_ChatInfo* scChatData::mutable_chatinfo() {
  set_has_chatinfo();
  if (chatinfo_ == NULL) chatinfo_ = new ::struct_ChatInfo;
  // @@protoc_insertion_point(field_mutable:scChatData.chatInfo)
  return chatinfo_;
}
inline ::struct_ChatInfo* scChatData::release_chatinfo() {
  clear_has_chatinfo();
  ::struct_ChatInfo* temp = chatinfo_;
  chatinfo_ = NULL;
  return temp;
}
inline void scChatData::set_allocated_chatinfo(::struct_ChatInfo* chatinfo) {
  delete chatinfo_;
  chatinfo_ = chatinfo;
  if (chatinfo) {
    set_has_chatinfo();
  } else {
    clear_has_chatinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:scChatData.chatInfo)
}

// -------------------------------------------------------------------

// csRegisterAccount

// optional string accountName = 1;
inline bool csRegisterAccount::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csRegisterAccount::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csRegisterAccount::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csRegisterAccount::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& csRegisterAccount::accountname() const {
  // @@protoc_insertion_point(field_get:csRegisterAccount.accountName)
  return *accountname_;
}
inline void csRegisterAccount::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set:csRegisterAccount.accountName)
}
inline void csRegisterAccount::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set_char:csRegisterAccount.accountName)
}
inline void csRegisterAccount::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csRegisterAccount.accountName)
}
inline ::std::string* csRegisterAccount::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csRegisterAccount.accountName)
  return accountname_;
}
inline ::std::string* csRegisterAccount::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csRegisterAccount::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csRegisterAccount.accountName)
}

// optional string password = 2;
inline bool csRegisterAccount::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csRegisterAccount::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csRegisterAccount::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csRegisterAccount::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& csRegisterAccount::password() const {
  // @@protoc_insertion_point(field_get:csRegisterAccount.password)
  return *password_;
}
inline void csRegisterAccount::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:csRegisterAccount.password)
}
inline void csRegisterAccount::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:csRegisterAccount.password)
}
inline void csRegisterAccount::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csRegisterAccount.password)
}
inline ::std::string* csRegisterAccount::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csRegisterAccount.password)
  return password_;
}
inline ::std::string* csRegisterAccount::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csRegisterAccount::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csRegisterAccount.password)
}

// optional string repeatPassword = 3;
inline bool csRegisterAccount::has_repeatpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void csRegisterAccount::set_has_repeatpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void csRegisterAccount::clear_has_repeatpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void csRegisterAccount::clear_repeatpassword() {
  if (repeatpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repeatpassword_->clear();
  }
  clear_has_repeatpassword();
}
inline const ::std::string& csRegisterAccount::repeatpassword() const {
  // @@protoc_insertion_point(field_get:csRegisterAccount.repeatPassword)
  return *repeatpassword_;
}
inline void csRegisterAccount::set_repeatpassword(const ::std::string& value) {
  set_has_repeatpassword();
  if (repeatpassword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repeatpassword_ = new ::std::string;
  }
  repeatpassword_->assign(value);
  // @@protoc_insertion_point(field_set:csRegisterAccount.repeatPassword)
}
inline void csRegisterAccount::set_repeatpassword(const char* value) {
  set_has_repeatpassword();
  if (repeatpassword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repeatpassword_ = new ::std::string;
  }
  repeatpassword_->assign(value);
  // @@protoc_insertion_point(field_set_char:csRegisterAccount.repeatPassword)
}
inline void csRegisterAccount::set_repeatpassword(const char* value, size_t size) {
  set_has_repeatpassword();
  if (repeatpassword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repeatpassword_ = new ::std::string;
  }
  repeatpassword_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csRegisterAccount.repeatPassword)
}
inline ::std::string* csRegisterAccount::mutable_repeatpassword() {
  set_has_repeatpassword();
  if (repeatpassword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    repeatpassword_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csRegisterAccount.repeatPassword)
  return repeatpassword_;
}
inline ::std::string* csRegisterAccount::release_repeatpassword() {
  clear_has_repeatpassword();
  if (repeatpassword_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = repeatpassword_;
    repeatpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csRegisterAccount::set_allocated_repeatpassword(::std::string* repeatpassword) {
  if (repeatpassword_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete repeatpassword_;
  }
  if (repeatpassword) {
    set_has_repeatpassword();
    repeatpassword_ = repeatpassword;
  } else {
    clear_has_repeatpassword();
    repeatpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csRegisterAccount.repeatPassword)
}

// -------------------------------------------------------------------

// scRegisterAccount

// optional uint32 result = 1;
inline bool scRegisterAccount::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scRegisterAccount::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scRegisterAccount::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scRegisterAccount::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 scRegisterAccount::result() const {
  // @@protoc_insertion_point(field_get:scRegisterAccount.result)
  return result_;
}
inline void scRegisterAccount::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:scRegisterAccount.result)
}

// -------------------------------------------------------------------

// csLoginGame

// optional string accountName = 1;
inline bool csLoginGame::has_accountname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csLoginGame::set_has_accountname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csLoginGame::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csLoginGame::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& csLoginGame::accountname() const {
  // @@protoc_insertion_point(field_get:csLoginGame.accountName)
  return *accountname_;
}
inline void csLoginGame::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set:csLoginGame.accountName)
}
inline void csLoginGame::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
  // @@protoc_insertion_point(field_set_char:csLoginGame.accountName)
}
inline void csLoginGame::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csLoginGame.accountName)
}
inline ::std::string* csLoginGame::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accountname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csLoginGame.accountName)
  return accountname_;
}
inline ::std::string* csLoginGame::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csLoginGame::set_allocated_accountname(::std::string* accountname) {
  if (accountname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accountname_;
  }
  if (accountname) {
    set_has_accountname();
    accountname_ = accountname;
  } else {
    clear_has_accountname();
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csLoginGame.accountName)
}

// optional string password = 2;
inline bool csLoginGame::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csLoginGame::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csLoginGame::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csLoginGame::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& csLoginGame::password() const {
  // @@protoc_insertion_point(field_get:csLoginGame.password)
  return *password_;
}
inline void csLoginGame::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:csLoginGame.password)
}
inline void csLoginGame::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:csLoginGame.password)
}
inline void csLoginGame::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csLoginGame.password)
}
inline ::std::string* csLoginGame::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csLoginGame.password)
  return password_;
}
inline ::std::string* csLoginGame::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csLoginGame::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csLoginGame.password)
}

// -------------------------------------------------------------------

// scLoginGame

// optional uint32 result = 1;
inline bool scLoginGame::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scLoginGame::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scLoginGame::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scLoginGame::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 scLoginGame::result() const {
  // @@protoc_insertion_point(field_get:scLoginGame.result)
  return result_;
}
inline void scLoginGame::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:scLoginGame.result)
}

// -------------------------------------------------------------------

// csSelectServer

// optional uint32 id = 1;
inline bool csSelectServer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csSelectServer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csSelectServer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csSelectServer::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 csSelectServer::id() const {
  // @@protoc_insertion_point(field_get:csSelectServer.id)
  return id_;
}
inline void csSelectServer::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:csSelectServer.id)
}

// -------------------------------------------------------------------

// scSelectServer

// optional uint32 result = 1;
inline bool scSelectServer::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scSelectServer::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scSelectServer::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scSelectServer::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 scSelectServer::result() const {
  // @@protoc_insertion_point(field_get:scSelectServer.result)
  return result_;
}
inline void scSelectServer::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:scSelectServer.result)
}

// optional uint32 action = 2;
inline bool scSelectServer::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void scSelectServer::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void scSelectServer::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void scSelectServer::clear_action() {
  action_ = 0u;
  clear_has_action();
}
inline ::google::protobuf::uint32 scSelectServer::action() const {
  // @@protoc_insertion_point(field_get:scSelectServer.action)
  return action_;
}
inline void scSelectServer::set_action(::google::protobuf::uint32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:scSelectServer.action)
}

// -------------------------------------------------------------------

// csCreateRole

// optional string name = 1;
inline bool csCreateRole::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void csCreateRole::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void csCreateRole::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void csCreateRole::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& csCreateRole::name() const {
  // @@protoc_insertion_point(field_get:csCreateRole.name)
  return *name_;
}
inline void csCreateRole::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:csCreateRole.name)
}
inline void csCreateRole::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:csCreateRole.name)
}
inline void csCreateRole::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csCreateRole.name)
}
inline ::std::string* csCreateRole::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:csCreateRole.name)
  return name_;
}
inline ::std::string* csCreateRole::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void csCreateRole::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:csCreateRole.name)
}

// optional uint32 sex = 2;
inline bool csCreateRole::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void csCreateRole::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void csCreateRole::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void csCreateRole::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 csCreateRole::sex() const {
  // @@protoc_insertion_point(field_get:csCreateRole.sex)
  return sex_;
}
inline void csCreateRole::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:csCreateRole.sex)
}

// optional uint32 profession = 3;
inline bool csCreateRole::has_profession() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void csCreateRole::set_has_profession() {
  _has_bits_[0] |= 0x00000004u;
}
inline void csCreateRole::clear_has_profession() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void csCreateRole::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 csCreateRole::profession() const {
  // @@protoc_insertion_point(field_get:csCreateRole.profession)
  return profession_;
}
inline void csCreateRole::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:csCreateRole.profession)
}

// -------------------------------------------------------------------

// scCreateRole

// optional uint32 result = 1;
inline bool scCreateRole::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void scCreateRole::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void scCreateRole::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void scCreateRole::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 scCreateRole::result() const {
  // @@protoc_insertion_point(field_get:scCreateRole.result)
  return result_;
}
inline void scCreateRole::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:scCreateRole.result)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED
