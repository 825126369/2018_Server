// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_struct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* struct_serverList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_serverList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fstruct_2eproto() {
  protobuf_AddDesc_proto_5fstruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_struct.proto");
  GOOGLE_CHECK(file != NULL);
  struct_serverList_descriptor_ = file->message_type(0);
  static const int struct_serverList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_serverList, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_serverList, serverid_),
  };
  struct_serverList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      struct_serverList_descriptor_,
      struct_serverList::default_instance_,
      struct_serverList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_serverList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_serverList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(struct_serverList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fstruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    struct_serverList_descriptor_, &struct_serverList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fstruct_2eproto() {
  delete struct_serverList::default_instance_;
  delete struct_serverList_reflection_;
}

void protobuf_AddDesc_proto_5fstruct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto_struct.proto\"9\n\021struct_serverLis"
    "t\022\022\n\nserverName\030\001 \001(\t\022\020\n\010serverId\030\002 \001(\005", 79);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_struct.proto", &protobuf_RegisterTypes);
  struct_serverList::default_instance_ = new struct_serverList();
  struct_serverList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fstruct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fstruct_2eproto {
  StaticDescriptorInitializer_proto_5fstruct_2eproto() {
    protobuf_AddDesc_proto_5fstruct_2eproto();
  }
} static_descriptor_initializer_proto_5fstruct_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int struct_serverList::kServerNameFieldNumber;
const int struct_serverList::kServerIdFieldNumber;
#endif  // !_MSC_VER

struct_serverList::struct_serverList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:struct_serverList)
}

void struct_serverList::InitAsDefaultInstance() {
}

struct_serverList::struct_serverList(const struct_serverList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:struct_serverList)
}

void struct_serverList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

struct_serverList::~struct_serverList() {
  // @@protoc_insertion_point(destructor:struct_serverList)
  SharedDtor();
}

void struct_serverList::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void struct_serverList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_serverList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_serverList_descriptor_;
}

const struct_serverList& struct_serverList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_5fstruct_2eproto();
  return *default_instance_;
}

struct_serverList* struct_serverList::default_instance_ = NULL;

struct_serverList* struct_serverList::New() const {
  return new struct_serverList;
}

void struct_serverList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        servername_->clear();
      }
    }
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool struct_serverList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:struct_serverList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serverName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_serverId;
        break;
      }

      // optional int32 serverId = 2;
      case 2: {
        if (tag == 16) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:struct_serverList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:struct_serverList)
  return false;
#undef DO_
}

void struct_serverList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:struct_serverList)
  // optional string serverName = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servername(), output);
  }

  // optional int32 serverId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:struct_serverList)
}

::google::protobuf::uint8* struct_serverList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:struct_serverList)
  // optional string serverName = 1;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servername(), target);
  }

  // optional int32 serverId = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:struct_serverList)
  return target;
}

int struct_serverList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string serverName = 1;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional int32 serverId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_serverList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const struct_serverList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const struct_serverList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void struct_serverList::MergeFrom(const struct_serverList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void struct_serverList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_serverList::CopyFrom(const struct_serverList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool struct_serverList::IsInitialized() const {

  return true;
}

void struct_serverList::Swap(struct_serverList* other) {
  if (other != this) {
    std::swap(servername_, other->servername_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata struct_serverList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_serverList_descriptor_;
  metadata.reflection = struct_serverList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
