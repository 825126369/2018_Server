// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_struct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto_struct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xk_protobuf_data {

namespace {

const ::google::protobuf::Descriptor* struct_serverList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_serverList_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_PlayerSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_PlayerSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_PlayerDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_PlayerDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_PlayerBagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_PlayerBagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_LOL_HeroDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_LOL_HeroDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* struct_ChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  struct_ChatInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_5fstruct_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_5fstruct_2eproto() {
  protobuf_AddDesc_proto_5fstruct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto_struct.proto");
  GOOGLE_CHECK(file != NULL);
  struct_serverList_descriptor_ = file->message_type(0);
  static const int struct_serverList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_serverList, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_serverList, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_serverList, serverid_),
  };
  struct_serverList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      struct_serverList_descriptor_,
      struct_serverList::internal_default_instance(),
      struct_serverList_offsets_,
      -1,
      -1,
      -1,
      sizeof(struct_serverList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_serverList, _internal_metadata_));
  struct_ItemInfo_descriptor_ = file->message_type(1);
  static const int struct_ItemInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ItemInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ItemInfo, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ItemInfo, cout_),
  };
  struct_ItemInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      struct_ItemInfo_descriptor_,
      struct_ItemInfo::internal_default_instance(),
      struct_ItemInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(struct_ItemInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ItemInfo, _internal_metadata_));
  struct_PlayerSimpleInfo_descriptor_ = file->message_type(2);
  static const int struct_PlayerSimpleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerSimpleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerSimpleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerSimpleInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerSimpleInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerSimpleInfo, level_),
  };
  struct_PlayerSimpleInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      struct_PlayerSimpleInfo_descriptor_,
      struct_PlayerSimpleInfo::internal_default_instance(),
      struct_PlayerSimpleInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(struct_PlayerSimpleInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerSimpleInfo, _internal_metadata_));
  struct_PlayerDetailInfo_descriptor_ = file->message_type(3);
  static const int struct_PlayerDetailInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerDetailInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerDetailInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerDetailInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerDetailInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerDetailInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerDetailInfo, equiplist_),
  };
  struct_PlayerDetailInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      struct_PlayerDetailInfo_descriptor_,
      struct_PlayerDetailInfo::internal_default_instance(),
      struct_PlayerDetailInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(struct_PlayerDetailInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerDetailInfo, _internal_metadata_));
  struct_PlayerBagInfo_descriptor_ = file->message_type(4);
  static const int struct_PlayerBagInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerBagInfo, maxcout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerBagInfo, itemlist_),
  };
  struct_PlayerBagInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      struct_PlayerBagInfo_descriptor_,
      struct_PlayerBagInfo::internal_default_instance(),
      struct_PlayerBagInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(struct_PlayerBagInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_PlayerBagInfo, _internal_metadata_));
  struct_LOL_HeroDetailInfo_descriptor_ = file->message_type(5);
  static const int struct_LOL_HeroDetailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_LOL_HeroDetailInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_LOL_HeroDetailInfo, configid_),
  };
  struct_LOL_HeroDetailInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      struct_LOL_HeroDetailInfo_descriptor_,
      struct_LOL_HeroDetailInfo::internal_default_instance(),
      struct_LOL_HeroDetailInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(struct_LOL_HeroDetailInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_LOL_HeroDetailInfo, _internal_metadata_));
  struct_ChatInfo_descriptor_ = file->message_type(6);
  static const int struct_ChatInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ChatInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ChatInfo, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ChatInfo, receiver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ChatInfo, talkmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ChatInfo, time_),
  };
  struct_ChatInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      struct_ChatInfo_descriptor_,
      struct_ChatInfo::internal_default_instance(),
      struct_ChatInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(struct_ChatInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(struct_ChatInfo, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_5fstruct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      struct_serverList_descriptor_, struct_serverList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      struct_ItemInfo_descriptor_, struct_ItemInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      struct_PlayerSimpleInfo_descriptor_, struct_PlayerSimpleInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      struct_PlayerDetailInfo_descriptor_, struct_PlayerDetailInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      struct_PlayerBagInfo_descriptor_, struct_PlayerBagInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      struct_LOL_HeroDetailInfo_descriptor_, struct_LOL_HeroDetailInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      struct_ChatInfo_descriptor_, struct_ChatInfo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_5fstruct_2eproto() {
  struct_serverList_default_instance_.Shutdown();
  delete struct_serverList_reflection_;
  struct_ItemInfo_default_instance_.Shutdown();
  delete struct_ItemInfo_reflection_;
  struct_PlayerSimpleInfo_default_instance_.Shutdown();
  delete struct_PlayerSimpleInfo_reflection_;
  struct_PlayerDetailInfo_default_instance_.Shutdown();
  delete struct_PlayerDetailInfo_reflection_;
  struct_PlayerBagInfo_default_instance_.Shutdown();
  delete struct_PlayerBagInfo_reflection_;
  struct_LOL_HeroDetailInfo_default_instance_.Shutdown();
  delete struct_LOL_HeroDetailInfo_reflection_;
  struct_ChatInfo_default_instance_.Shutdown();
  delete struct_ChatInfo_reflection_;
}

void protobuf_InitDefaults_proto_5fstruct_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  struct_serverList_default_instance_.DefaultConstruct();
  struct_ItemInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  struct_PlayerSimpleInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  struct_PlayerDetailInfo_default_instance_.DefaultConstruct();
  struct_PlayerBagInfo_default_instance_.DefaultConstruct();
  struct_LOL_HeroDetailInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  struct_ChatInfo_default_instance_.DefaultConstruct();
  struct_serverList_default_instance_.get_mutable()->InitAsDefaultInstance();
  struct_ItemInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  struct_PlayerSimpleInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  struct_PlayerDetailInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  struct_PlayerBagInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  struct_LOL_HeroDetailInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  struct_ChatInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_proto_5fstruct_2eproto_once_);
void protobuf_InitDefaults_proto_5fstruct_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_proto_5fstruct_2eproto_once_,
                 &protobuf_InitDefaults_proto_5fstruct_2eproto_impl);
}
void protobuf_AddDesc_proto_5fstruct_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_proto_5fstruct_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto_struct.proto\022\020xk_protobuf_data\"\?"
    "\n\021struct_serverList\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030"
    "\002 \001(\r\022\020\n\010serverId\030\003 \001(\r\"J\n\017struct_ItemIn"
    "fo\022\n\n\002id\030\001 \001(\004\022\013\n\003pos\030\002 \001(\r\022\020\n\010configId\030"
    "\003 \001(\r\022\014\n\004cout\030\004 \001(\r\"f\n\027struct_PlayerSimp"
    "leInfo\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\016\n\006gend"
    "er\030\003 \001(\r\022\022\n\nprofession\030\004 \001(\r\022\r\n\005level\030\005 "
    "\001(\r\"\234\001\n\027struct_PlayerDetailInfo\022\n\n\002id\030\001 "
    "\001(\004\022\014\n\004name\030\002 \001(\t\022\016\n\006gender\030\003 \001(\r\022\022\n\npro"
    "fession\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\0224\n\tequipLis"
    "t\030\006 \003(\0132!.xk_protobuf_data.struct_ItemIn"
    "fo\"\\\n\024struct_PlayerBagInfo\022\017\n\007maxCout\030\001 "
    "\001(\r\0223\n\010itemList\030\002 \003(\0132!.xk_protobuf_data"
    ".struct_ItemInfo\"9\n\031struct_LOL_HeroDetai"
    "lInfo\022\n\n\002id\030\001 \001(\004\022\020\n\010configId\030\002 \001(\r\"\273\001\n\017"
    "struct_ChatInfo\022\021\n\tchannelId\030\001 \001(\r\0229\n\006Se"
    "nder\030\002 \001(\0132).xk_protobuf_data.struct_Pla"
    "yerSimpleInfo\022;\n\010Receiver\030\003 \001(\0132).xk_pro"
    "tobuf_data.struct_PlayerSimpleInfo\022\017\n\007Ta"
    "lkMsg\030\004 \001(\t\022\014\n\004time\030\005 \001(\004b\006proto3", 793);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto_struct.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_5fstruct_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_proto_5fstruct_2eproto_once_);
void protobuf_AddDesc_proto_5fstruct_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_proto_5fstruct_2eproto_once_,
                 &protobuf_AddDesc_proto_5fstruct_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_5fstruct_2eproto {
  StaticDescriptorInitializer_proto_5fstruct_2eproto() {
    protobuf_AddDesc_proto_5fstruct_2eproto();
  }
} static_descriptor_initializer_proto_5fstruct_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int struct_serverList::kIpFieldNumber;
const int struct_serverList::kPortFieldNumber;
const int struct_serverList::kServerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

struct_serverList::struct_serverList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:xk_protobuf_data.struct_serverList)
}

void struct_serverList::InitAsDefaultInstance() {
}

struct_serverList::struct_serverList(const struct_serverList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xk_protobuf_data.struct_serverList)
}

void struct_serverList::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&port_) + sizeof(serverid_));
  _cached_size_ = 0;
}

struct_serverList::~struct_serverList() {
  // @@protoc_insertion_point(destructor:xk_protobuf_data.struct_serverList)
  SharedDtor();
}

void struct_serverList::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void struct_serverList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_serverList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_serverList_descriptor_;
}

const struct_serverList& struct_serverList::default_instance() {
  protobuf_InitDefaults_proto_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<struct_serverList> struct_serverList_default_instance_;

struct_serverList* struct_serverList::New(::google::protobuf::Arena* arena) const {
  struct_serverList* n = new struct_serverList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void struct_serverList::Clear() {
// @@protoc_insertion_point(message_clear_start:xk_protobuf_data.struct_serverList)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(struct_serverList, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<struct_serverList*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(port_, serverid_);
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool struct_serverList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xk_protobuf_data.struct_serverList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xk_protobuf_data.struct_serverList.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverId;
        break;
      }

      // optional uint32 serverId = 3;
      case 3: {
        if (tag == 24) {
         parse_serverId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xk_protobuf_data.struct_serverList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xk_protobuf_data.struct_serverList)
  return false;
#undef DO_
}

void struct_serverList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xk_protobuf_data.struct_serverList)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xk_protobuf_data.struct_serverList.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional uint32 serverId = 3;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // @@protoc_insertion_point(serialize_end:xk_protobuf_data.struct_serverList)
}

::google::protobuf::uint8* struct_serverList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xk_protobuf_data.struct_serverList)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xk_protobuf_data.struct_serverList.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional uint32 serverId = 3;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xk_protobuf_data.struct_serverList)
  return target;
}

size_t struct_serverList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xk_protobuf_data.struct_serverList)
  size_t total_size = 0;

  // optional string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // optional uint32 serverId = 3;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_serverList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xk_protobuf_data.struct_serverList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const struct_serverList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const struct_serverList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xk_protobuf_data.struct_serverList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xk_protobuf_data.struct_serverList)
    UnsafeMergeFrom(*source);
  }
}

void struct_serverList::MergeFrom(const struct_serverList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xk_protobuf_data.struct_serverList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void struct_serverList::UnsafeMergeFrom(const struct_serverList& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
}

void struct_serverList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xk_protobuf_data.struct_serverList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_serverList::CopyFrom(const struct_serverList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xk_protobuf_data.struct_serverList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool struct_serverList::IsInitialized() const {

  return true;
}

void struct_serverList::Swap(struct_serverList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void struct_serverList::InternalSwap(struct_serverList* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(serverid_, other->serverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata struct_serverList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_serverList_descriptor_;
  metadata.reflection = struct_serverList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// struct_serverList

// optional string ip = 1;
void struct_serverList::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& struct_serverList::ip() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_serverList.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void struct_serverList::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_serverList.ip)
}
void struct_serverList::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.struct_serverList.ip)
}
void struct_serverList::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.struct_serverList.ip)
}
::std::string* struct_serverList::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.struct_serverList.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* struct_serverList::release_ip() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.struct_serverList.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void struct_serverList::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.struct_serverList.ip)
}

// optional uint32 port = 2;
void struct_serverList::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 struct_serverList::port() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_serverList.port)
  return port_;
}
void struct_serverList::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_serverList.port)
}

// optional uint32 serverId = 3;
void struct_serverList::clear_serverid() {
  serverid_ = 0u;
}
::google::protobuf::uint32 struct_serverList::serverid() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_serverList.serverId)
  return serverid_;
}
void struct_serverList::set_serverid(::google::protobuf::uint32 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_serverList.serverId)
}

inline const struct_serverList* struct_serverList::internal_default_instance() {
  return &struct_serverList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int struct_ItemInfo::kIdFieldNumber;
const int struct_ItemInfo::kPosFieldNumber;
const int struct_ItemInfo::kConfigIdFieldNumber;
const int struct_ItemInfo::kCoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

struct_ItemInfo::struct_ItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:xk_protobuf_data.struct_ItemInfo)
}

void struct_ItemInfo::InitAsDefaultInstance() {
}

struct_ItemInfo::struct_ItemInfo(const struct_ItemInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xk_protobuf_data.struct_ItemInfo)
}

void struct_ItemInfo::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&cout_) -
    reinterpret_cast<char*>(&id_) + sizeof(cout_));
  _cached_size_ = 0;
}

struct_ItemInfo::~struct_ItemInfo() {
  // @@protoc_insertion_point(destructor:xk_protobuf_data.struct_ItemInfo)
  SharedDtor();
}

void struct_ItemInfo::SharedDtor() {
}

void struct_ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_ItemInfo_descriptor_;
}

const struct_ItemInfo& struct_ItemInfo::default_instance() {
  protobuf_InitDefaults_proto_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<struct_ItemInfo> struct_ItemInfo_default_instance_;

struct_ItemInfo* struct_ItemInfo::New(::google::protobuf::Arena* arena) const {
  struct_ItemInfo* n = new struct_ItemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void struct_ItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xk_protobuf_data.struct_ItemInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(struct_ItemInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<struct_ItemInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, cout_);

#undef ZR_HELPER_
#undef ZR_

}

bool struct_ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xk_protobuf_data.struct_ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_configId;
        break;
      }

      // optional uint32 configId = 3;
      case 3: {
        if (tag == 24) {
         parse_configId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cout;
        break;
      }

      // optional uint32 cout = 4;
      case 4: {
        if (tag == 32) {
         parse_cout:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xk_protobuf_data.struct_ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xk_protobuf_data.struct_ItemInfo)
  return false;
#undef DO_
}

void struct_ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xk_protobuf_data.struct_ItemInfo)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 configId = 3;
  if (this->configid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->configid(), output);
  }

  // optional uint32 cout = 4;
  if (this->cout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cout(), output);
  }

  // @@protoc_insertion_point(serialize_end:xk_protobuf_data.struct_ItemInfo)
}

::google::protobuf::uint8* struct_ItemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xk_protobuf_data.struct_ItemInfo)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 configId = 3;
  if (this->configid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->configid(), target);
  }

  // optional uint32 cout = 4;
  if (this->cout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cout(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xk_protobuf_data.struct_ItemInfo)
  return target;
}

size_t struct_ItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xk_protobuf_data.struct_ItemInfo)
  size_t total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional uint32 pos = 2;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // optional uint32 configId = 3;
  if (this->configid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->configid());
  }

  // optional uint32 cout = 4;
  if (this->cout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xk_protobuf_data.struct_ItemInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const struct_ItemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const struct_ItemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xk_protobuf_data.struct_ItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xk_protobuf_data.struct_ItemInfo)
    UnsafeMergeFrom(*source);
  }
}

void struct_ItemInfo::MergeFrom(const struct_ItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xk_protobuf_data.struct_ItemInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void struct_ItemInfo::UnsafeMergeFrom(const struct_ItemInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.configid() != 0) {
    set_configid(from.configid());
  }
  if (from.cout() != 0) {
    set_cout(from.cout());
  }
}

void struct_ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xk_protobuf_data.struct_ItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_ItemInfo::CopyFrom(const struct_ItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xk_protobuf_data.struct_ItemInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool struct_ItemInfo::IsInitialized() const {

  return true;
}

void struct_ItemInfo::Swap(struct_ItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void struct_ItemInfo::InternalSwap(struct_ItemInfo* other) {
  std::swap(id_, other->id_);
  std::swap(pos_, other->pos_);
  std::swap(configid_, other->configid_);
  std::swap(cout_, other->cout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata struct_ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_ItemInfo_descriptor_;
  metadata.reflection = struct_ItemInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// struct_ItemInfo

// optional uint64 id = 1;
void struct_ItemInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 struct_ItemInfo::id() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_ItemInfo.id)
  return id_;
}
void struct_ItemInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_ItemInfo.id)
}

// optional uint32 pos = 2;
void struct_ItemInfo::clear_pos() {
  pos_ = 0u;
}
::google::protobuf::uint32 struct_ItemInfo::pos() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_ItemInfo.pos)
  return pos_;
}
void struct_ItemInfo::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_ItemInfo.pos)
}

// optional uint32 configId = 3;
void struct_ItemInfo::clear_configid() {
  configid_ = 0u;
}
::google::protobuf::uint32 struct_ItemInfo::configid() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_ItemInfo.configId)
  return configid_;
}
void struct_ItemInfo::set_configid(::google::protobuf::uint32 value) {
  
  configid_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_ItemInfo.configId)
}

// optional uint32 cout = 4;
void struct_ItemInfo::clear_cout() {
  cout_ = 0u;
}
::google::protobuf::uint32 struct_ItemInfo::cout() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_ItemInfo.cout)
  return cout_;
}
void struct_ItemInfo::set_cout(::google::protobuf::uint32 value) {
  
  cout_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_ItemInfo.cout)
}

inline const struct_ItemInfo* struct_ItemInfo::internal_default_instance() {
  return &struct_ItemInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int struct_PlayerSimpleInfo::kIdFieldNumber;
const int struct_PlayerSimpleInfo::kNameFieldNumber;
const int struct_PlayerSimpleInfo::kGenderFieldNumber;
const int struct_PlayerSimpleInfo::kProfessionFieldNumber;
const int struct_PlayerSimpleInfo::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

struct_PlayerSimpleInfo::struct_PlayerSimpleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:xk_protobuf_data.struct_PlayerSimpleInfo)
}

void struct_PlayerSimpleInfo::InitAsDefaultInstance() {
}

struct_PlayerSimpleInfo::struct_PlayerSimpleInfo(const struct_PlayerSimpleInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xk_protobuf_data.struct_PlayerSimpleInfo)
}

void struct_PlayerSimpleInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_) + sizeof(level_));
  _cached_size_ = 0;
}

struct_PlayerSimpleInfo::~struct_PlayerSimpleInfo() {
  // @@protoc_insertion_point(destructor:xk_protobuf_data.struct_PlayerSimpleInfo)
  SharedDtor();
}

void struct_PlayerSimpleInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void struct_PlayerSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_PlayerSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_PlayerSimpleInfo_descriptor_;
}

const struct_PlayerSimpleInfo& struct_PlayerSimpleInfo::default_instance() {
  protobuf_InitDefaults_proto_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<struct_PlayerSimpleInfo> struct_PlayerSimpleInfo_default_instance_;

struct_PlayerSimpleInfo* struct_PlayerSimpleInfo::New(::google::protobuf::Arena* arena) const {
  struct_PlayerSimpleInfo* n = new struct_PlayerSimpleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void struct_PlayerSimpleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xk_protobuf_data.struct_PlayerSimpleInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(struct_PlayerSimpleInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<struct_PlayerSimpleInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, level_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool struct_PlayerSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xk_protobuf_data.struct_PlayerSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xk_protobuf_data.struct_PlayerSimpleInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 3;
      case 3: {
        if (tag == 24) {
         parse_gender:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 4;
      case 4: {
        if (tag == 32) {
         parse_profession:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xk_protobuf_data.struct_PlayerSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xk_protobuf_data.struct_PlayerSimpleInfo)
  return false;
#undef DO_
}

void struct_PlayerSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xk_protobuf_data.struct_PlayerSimpleInfo)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xk_protobuf_data.struct_PlayerSimpleInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 gender = 3;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gender(), output);
  }

  // optional uint32 profession = 4;
  if (this->profession() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->profession(), output);
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // @@protoc_insertion_point(serialize_end:xk_protobuf_data.struct_PlayerSimpleInfo)
}

::google::protobuf::uint8* struct_PlayerSimpleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xk_protobuf_data.struct_PlayerSimpleInfo)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xk_protobuf_data.struct_PlayerSimpleInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 gender = 3;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gender(), target);
  }

  // optional uint32 profession = 4;
  if (this->profession() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->profession(), target);
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xk_protobuf_data.struct_PlayerSimpleInfo)
  return target;
}

size_t struct_PlayerSimpleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xk_protobuf_data.struct_PlayerSimpleInfo)
  size_t total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 gender = 3;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  // optional uint32 profession = 4;
  if (this->profession() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->profession());
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_PlayerSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xk_protobuf_data.struct_PlayerSimpleInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const struct_PlayerSimpleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const struct_PlayerSimpleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xk_protobuf_data.struct_PlayerSimpleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xk_protobuf_data.struct_PlayerSimpleInfo)
    UnsafeMergeFrom(*source);
  }
}

void struct_PlayerSimpleInfo::MergeFrom(const struct_PlayerSimpleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xk_protobuf_data.struct_PlayerSimpleInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void struct_PlayerSimpleInfo::UnsafeMergeFrom(const struct_PlayerSimpleInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.profession() != 0) {
    set_profession(from.profession());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void struct_PlayerSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xk_protobuf_data.struct_PlayerSimpleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_PlayerSimpleInfo::CopyFrom(const struct_PlayerSimpleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xk_protobuf_data.struct_PlayerSimpleInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool struct_PlayerSimpleInfo::IsInitialized() const {

  return true;
}

void struct_PlayerSimpleInfo::Swap(struct_PlayerSimpleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void struct_PlayerSimpleInfo::InternalSwap(struct_PlayerSimpleInfo* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(gender_, other->gender_);
  std::swap(profession_, other->profession_);
  std::swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata struct_PlayerSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_PlayerSimpleInfo_descriptor_;
  metadata.reflection = struct_PlayerSimpleInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// struct_PlayerSimpleInfo

// optional uint64 id = 1;
void struct_PlayerSimpleInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 struct_PlayerSimpleInfo::id() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerSimpleInfo.id)
  return id_;
}
void struct_PlayerSimpleInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerSimpleInfo.id)
}

// optional string name = 2;
void struct_PlayerSimpleInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& struct_PlayerSimpleInfo::name() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerSimpleInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void struct_PlayerSimpleInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerSimpleInfo.name)
}
void struct_PlayerSimpleInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.struct_PlayerSimpleInfo.name)
}
void struct_PlayerSimpleInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.struct_PlayerSimpleInfo.name)
}
::std::string* struct_PlayerSimpleInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.struct_PlayerSimpleInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* struct_PlayerSimpleInfo::release_name() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.struct_PlayerSimpleInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void struct_PlayerSimpleInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.struct_PlayerSimpleInfo.name)
}

// optional uint32 gender = 3;
void struct_PlayerSimpleInfo::clear_gender() {
  gender_ = 0u;
}
::google::protobuf::uint32 struct_PlayerSimpleInfo::gender() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerSimpleInfo.gender)
  return gender_;
}
void struct_PlayerSimpleInfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerSimpleInfo.gender)
}

// optional uint32 profession = 4;
void struct_PlayerSimpleInfo::clear_profession() {
  profession_ = 0u;
}
::google::protobuf::uint32 struct_PlayerSimpleInfo::profession() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerSimpleInfo.profession)
  return profession_;
}
void struct_PlayerSimpleInfo::set_profession(::google::protobuf::uint32 value) {
  
  profession_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerSimpleInfo.profession)
}

// optional uint32 level = 5;
void struct_PlayerSimpleInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 struct_PlayerSimpleInfo::level() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerSimpleInfo.level)
  return level_;
}
void struct_PlayerSimpleInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerSimpleInfo.level)
}

inline const struct_PlayerSimpleInfo* struct_PlayerSimpleInfo::internal_default_instance() {
  return &struct_PlayerSimpleInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int struct_PlayerDetailInfo::kIdFieldNumber;
const int struct_PlayerDetailInfo::kNameFieldNumber;
const int struct_PlayerDetailInfo::kGenderFieldNumber;
const int struct_PlayerDetailInfo::kProfessionFieldNumber;
const int struct_PlayerDetailInfo::kLevelFieldNumber;
const int struct_PlayerDetailInfo::kEquipListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

struct_PlayerDetailInfo::struct_PlayerDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:xk_protobuf_data.struct_PlayerDetailInfo)
}

void struct_PlayerDetailInfo::InitAsDefaultInstance() {
}

struct_PlayerDetailInfo::struct_PlayerDetailInfo(const struct_PlayerDetailInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xk_protobuf_data.struct_PlayerDetailInfo)
}

void struct_PlayerDetailInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_) + sizeof(level_));
  _cached_size_ = 0;
}

struct_PlayerDetailInfo::~struct_PlayerDetailInfo() {
  // @@protoc_insertion_point(destructor:xk_protobuf_data.struct_PlayerDetailInfo)
  SharedDtor();
}

void struct_PlayerDetailInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void struct_PlayerDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_PlayerDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_PlayerDetailInfo_descriptor_;
}

const struct_PlayerDetailInfo& struct_PlayerDetailInfo::default_instance() {
  protobuf_InitDefaults_proto_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<struct_PlayerDetailInfo> struct_PlayerDetailInfo_default_instance_;

struct_PlayerDetailInfo* struct_PlayerDetailInfo::New(::google::protobuf::Arena* arena) const {
  struct_PlayerDetailInfo* n = new struct_PlayerDetailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void struct_PlayerDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xk_protobuf_data.struct_PlayerDetailInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(struct_PlayerDetailInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<struct_PlayerDetailInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, level_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  equiplist_.Clear();
}

bool struct_PlayerDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xk_protobuf_data.struct_PlayerDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xk_protobuf_data.struct_PlayerDetailInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gender;
        break;
      }

      // optional uint32 gender = 3;
      case 3: {
        if (tag == 24) {
         parse_gender:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gender_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 4;
      case 4: {
        if (tag == 32) {
         parse_profession:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_equipList;
        break;
      }

      // repeated .xk_protobuf_data.struct_ItemInfo equipList = 6;
      case 6: {
        if (tag == 50) {
         parse_equipList:
          DO_(input->IncrementRecursionDepth());
         parse_loop_equipList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_equiplist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_equipList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xk_protobuf_data.struct_PlayerDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xk_protobuf_data.struct_PlayerDetailInfo)
  return false;
#undef DO_
}

void struct_PlayerDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xk_protobuf_data.struct_PlayerDetailInfo)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xk_protobuf_data.struct_PlayerDetailInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 gender = 3;
  if (this->gender() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gender(), output);
  }

  // optional uint32 profession = 4;
  if (this->profession() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->profession(), output);
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // repeated .xk_protobuf_data.struct_ItemInfo equipList = 6;
  for (unsigned int i = 0, n = this->equiplist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->equiplist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xk_protobuf_data.struct_PlayerDetailInfo)
}

::google::protobuf::uint8* struct_PlayerDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xk_protobuf_data.struct_PlayerDetailInfo)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xk_protobuf_data.struct_PlayerDetailInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 gender = 3;
  if (this->gender() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gender(), target);
  }

  // optional uint32 profession = 4;
  if (this->profession() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->profession(), target);
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // repeated .xk_protobuf_data.struct_ItemInfo equipList = 6;
  for (unsigned int i = 0, n = this->equiplist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->equiplist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xk_protobuf_data.struct_PlayerDetailInfo)
  return target;
}

size_t struct_PlayerDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xk_protobuf_data.struct_PlayerDetailInfo)
  size_t total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint32 gender = 3;
  if (this->gender() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gender());
  }

  // optional uint32 profession = 4;
  if (this->profession() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->profession());
  }

  // optional uint32 level = 5;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // repeated .xk_protobuf_data.struct_ItemInfo equipList = 6;
  {
    unsigned int count = this->equiplist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiplist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_PlayerDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xk_protobuf_data.struct_PlayerDetailInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const struct_PlayerDetailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const struct_PlayerDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xk_protobuf_data.struct_PlayerDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xk_protobuf_data.struct_PlayerDetailInfo)
    UnsafeMergeFrom(*source);
  }
}

void struct_PlayerDetailInfo::MergeFrom(const struct_PlayerDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xk_protobuf_data.struct_PlayerDetailInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void struct_PlayerDetailInfo::UnsafeMergeFrom(const struct_PlayerDetailInfo& from) {
  GOOGLE_DCHECK(&from != this);
  equiplist_.MergeFrom(from.equiplist_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.gender() != 0) {
    set_gender(from.gender());
  }
  if (from.profession() != 0) {
    set_profession(from.profession());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void struct_PlayerDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xk_protobuf_data.struct_PlayerDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_PlayerDetailInfo::CopyFrom(const struct_PlayerDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xk_protobuf_data.struct_PlayerDetailInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool struct_PlayerDetailInfo::IsInitialized() const {

  return true;
}

void struct_PlayerDetailInfo::Swap(struct_PlayerDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void struct_PlayerDetailInfo::InternalSwap(struct_PlayerDetailInfo* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  std::swap(gender_, other->gender_);
  std::swap(profession_, other->profession_);
  std::swap(level_, other->level_);
  equiplist_.UnsafeArenaSwap(&other->equiplist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata struct_PlayerDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_PlayerDetailInfo_descriptor_;
  metadata.reflection = struct_PlayerDetailInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// struct_PlayerDetailInfo

// optional uint64 id = 1;
void struct_PlayerDetailInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 struct_PlayerDetailInfo::id() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerDetailInfo.id)
  return id_;
}
void struct_PlayerDetailInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerDetailInfo.id)
}

// optional string name = 2;
void struct_PlayerDetailInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& struct_PlayerDetailInfo::name() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerDetailInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void struct_PlayerDetailInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerDetailInfo.name)
}
void struct_PlayerDetailInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.struct_PlayerDetailInfo.name)
}
void struct_PlayerDetailInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.struct_PlayerDetailInfo.name)
}
::std::string* struct_PlayerDetailInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.struct_PlayerDetailInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* struct_PlayerDetailInfo::release_name() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.struct_PlayerDetailInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void struct_PlayerDetailInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.struct_PlayerDetailInfo.name)
}

// optional uint32 gender = 3;
void struct_PlayerDetailInfo::clear_gender() {
  gender_ = 0u;
}
::google::protobuf::uint32 struct_PlayerDetailInfo::gender() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerDetailInfo.gender)
  return gender_;
}
void struct_PlayerDetailInfo::set_gender(::google::protobuf::uint32 value) {
  
  gender_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerDetailInfo.gender)
}

// optional uint32 profession = 4;
void struct_PlayerDetailInfo::clear_profession() {
  profession_ = 0u;
}
::google::protobuf::uint32 struct_PlayerDetailInfo::profession() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerDetailInfo.profession)
  return profession_;
}
void struct_PlayerDetailInfo::set_profession(::google::protobuf::uint32 value) {
  
  profession_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerDetailInfo.profession)
}

// optional uint32 level = 5;
void struct_PlayerDetailInfo::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 struct_PlayerDetailInfo::level() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerDetailInfo.level)
  return level_;
}
void struct_PlayerDetailInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerDetailInfo.level)
}

// repeated .xk_protobuf_data.struct_ItemInfo equipList = 6;
int struct_PlayerDetailInfo::equiplist_size() const {
  return equiplist_.size();
}
void struct_PlayerDetailInfo::clear_equiplist() {
  equiplist_.Clear();
}
const ::xk_protobuf_data::struct_ItemInfo& struct_PlayerDetailInfo::equiplist(int index) const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerDetailInfo.equipList)
  return equiplist_.Get(index);
}
::xk_protobuf_data::struct_ItemInfo* struct_PlayerDetailInfo::mutable_equiplist(int index) {
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.struct_PlayerDetailInfo.equipList)
  return equiplist_.Mutable(index);
}
::xk_protobuf_data::struct_ItemInfo* struct_PlayerDetailInfo::add_equiplist() {
  // @@protoc_insertion_point(field_add:xk_protobuf_data.struct_PlayerDetailInfo.equipList)
  return equiplist_.Add();
}
::google::protobuf::RepeatedPtrField< ::xk_protobuf_data::struct_ItemInfo >*
struct_PlayerDetailInfo::mutable_equiplist() {
  // @@protoc_insertion_point(field_mutable_list:xk_protobuf_data.struct_PlayerDetailInfo.equipList)
  return &equiplist_;
}
const ::google::protobuf::RepeatedPtrField< ::xk_protobuf_data::struct_ItemInfo >&
struct_PlayerDetailInfo::equiplist() const {
  // @@protoc_insertion_point(field_list:xk_protobuf_data.struct_PlayerDetailInfo.equipList)
  return equiplist_;
}

inline const struct_PlayerDetailInfo* struct_PlayerDetailInfo::internal_default_instance() {
  return &struct_PlayerDetailInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int struct_PlayerBagInfo::kMaxCoutFieldNumber;
const int struct_PlayerBagInfo::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

struct_PlayerBagInfo::struct_PlayerBagInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:xk_protobuf_data.struct_PlayerBagInfo)
}

void struct_PlayerBagInfo::InitAsDefaultInstance() {
}

struct_PlayerBagInfo::struct_PlayerBagInfo(const struct_PlayerBagInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xk_protobuf_data.struct_PlayerBagInfo)
}

void struct_PlayerBagInfo::SharedCtor() {
  maxcout_ = 0u;
  _cached_size_ = 0;
}

struct_PlayerBagInfo::~struct_PlayerBagInfo() {
  // @@protoc_insertion_point(destructor:xk_protobuf_data.struct_PlayerBagInfo)
  SharedDtor();
}

void struct_PlayerBagInfo::SharedDtor() {
}

void struct_PlayerBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_PlayerBagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_PlayerBagInfo_descriptor_;
}

const struct_PlayerBagInfo& struct_PlayerBagInfo::default_instance() {
  protobuf_InitDefaults_proto_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<struct_PlayerBagInfo> struct_PlayerBagInfo_default_instance_;

struct_PlayerBagInfo* struct_PlayerBagInfo::New(::google::protobuf::Arena* arena) const {
  struct_PlayerBagInfo* n = new struct_PlayerBagInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void struct_PlayerBagInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xk_protobuf_data.struct_PlayerBagInfo)
  maxcout_ = 0u;
  itemlist_.Clear();
}

bool struct_PlayerBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xk_protobuf_data.struct_PlayerBagInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maxCout = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_itemList;
        break;
      }

      // repeated .xk_protobuf_data.struct_ItemInfo itemList = 2;
      case 2: {
        if (tag == 18) {
         parse_itemList:
          DO_(input->IncrementRecursionDepth());
         parse_loop_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_itemlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_itemList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xk_protobuf_data.struct_PlayerBagInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xk_protobuf_data.struct_PlayerBagInfo)
  return false;
#undef DO_
}

void struct_PlayerBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xk_protobuf_data.struct_PlayerBagInfo)
  // optional uint32 maxCout = 1;
  if (this->maxcout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxcout(), output);
  }

  // repeated .xk_protobuf_data.struct_ItemInfo itemList = 2;
  for (unsigned int i = 0, n = this->itemlist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemlist(i), output);
  }

  // @@protoc_insertion_point(serialize_end:xk_protobuf_data.struct_PlayerBagInfo)
}

::google::protobuf::uint8* struct_PlayerBagInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xk_protobuf_data.struct_PlayerBagInfo)
  // optional uint32 maxCout = 1;
  if (this->maxcout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxcout(), target);
  }

  // repeated .xk_protobuf_data.struct_ItemInfo itemList = 2;
  for (unsigned int i = 0, n = this->itemlist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->itemlist(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xk_protobuf_data.struct_PlayerBagInfo)
  return target;
}

size_t struct_PlayerBagInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xk_protobuf_data.struct_PlayerBagInfo)
  size_t total_size = 0;

  // optional uint32 maxCout = 1;
  if (this->maxcout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxcout());
  }

  // repeated .xk_protobuf_data.struct_ItemInfo itemList = 2;
  {
    unsigned int count = this->itemlist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemlist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_PlayerBagInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xk_protobuf_data.struct_PlayerBagInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const struct_PlayerBagInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const struct_PlayerBagInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xk_protobuf_data.struct_PlayerBagInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xk_protobuf_data.struct_PlayerBagInfo)
    UnsafeMergeFrom(*source);
  }
}

void struct_PlayerBagInfo::MergeFrom(const struct_PlayerBagInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xk_protobuf_data.struct_PlayerBagInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void struct_PlayerBagInfo::UnsafeMergeFrom(const struct_PlayerBagInfo& from) {
  GOOGLE_DCHECK(&from != this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from.maxcout() != 0) {
    set_maxcout(from.maxcout());
  }
}

void struct_PlayerBagInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xk_protobuf_data.struct_PlayerBagInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_PlayerBagInfo::CopyFrom(const struct_PlayerBagInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xk_protobuf_data.struct_PlayerBagInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool struct_PlayerBagInfo::IsInitialized() const {

  return true;
}

void struct_PlayerBagInfo::Swap(struct_PlayerBagInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void struct_PlayerBagInfo::InternalSwap(struct_PlayerBagInfo* other) {
  std::swap(maxcout_, other->maxcout_);
  itemlist_.UnsafeArenaSwap(&other->itemlist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata struct_PlayerBagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_PlayerBagInfo_descriptor_;
  metadata.reflection = struct_PlayerBagInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// struct_PlayerBagInfo

// optional uint32 maxCout = 1;
void struct_PlayerBagInfo::clear_maxcout() {
  maxcout_ = 0u;
}
::google::protobuf::uint32 struct_PlayerBagInfo::maxcout() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerBagInfo.maxCout)
  return maxcout_;
}
void struct_PlayerBagInfo::set_maxcout(::google::protobuf::uint32 value) {
  
  maxcout_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_PlayerBagInfo.maxCout)
}

// repeated .xk_protobuf_data.struct_ItemInfo itemList = 2;
int struct_PlayerBagInfo::itemlist_size() const {
  return itemlist_.size();
}
void struct_PlayerBagInfo::clear_itemlist() {
  itemlist_.Clear();
}
const ::xk_protobuf_data::struct_ItemInfo& struct_PlayerBagInfo::itemlist(int index) const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_PlayerBagInfo.itemList)
  return itemlist_.Get(index);
}
::xk_protobuf_data::struct_ItemInfo* struct_PlayerBagInfo::mutable_itemlist(int index) {
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.struct_PlayerBagInfo.itemList)
  return itemlist_.Mutable(index);
}
::xk_protobuf_data::struct_ItemInfo* struct_PlayerBagInfo::add_itemlist() {
  // @@protoc_insertion_point(field_add:xk_protobuf_data.struct_PlayerBagInfo.itemList)
  return itemlist_.Add();
}
::google::protobuf::RepeatedPtrField< ::xk_protobuf_data::struct_ItemInfo >*
struct_PlayerBagInfo::mutable_itemlist() {
  // @@protoc_insertion_point(field_mutable_list:xk_protobuf_data.struct_PlayerBagInfo.itemList)
  return &itemlist_;
}
const ::google::protobuf::RepeatedPtrField< ::xk_protobuf_data::struct_ItemInfo >&
struct_PlayerBagInfo::itemlist() const {
  // @@protoc_insertion_point(field_list:xk_protobuf_data.struct_PlayerBagInfo.itemList)
  return itemlist_;
}

inline const struct_PlayerBagInfo* struct_PlayerBagInfo::internal_default_instance() {
  return &struct_PlayerBagInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int struct_LOL_HeroDetailInfo::kIdFieldNumber;
const int struct_LOL_HeroDetailInfo::kConfigIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

struct_LOL_HeroDetailInfo::struct_LOL_HeroDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:xk_protobuf_data.struct_LOL_HeroDetailInfo)
}

void struct_LOL_HeroDetailInfo::InitAsDefaultInstance() {
}

struct_LOL_HeroDetailInfo::struct_LOL_HeroDetailInfo(const struct_LOL_HeroDetailInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xk_protobuf_data.struct_LOL_HeroDetailInfo)
}

void struct_LOL_HeroDetailInfo::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&configid_) -
    reinterpret_cast<char*>(&id_) + sizeof(configid_));
  _cached_size_ = 0;
}

struct_LOL_HeroDetailInfo::~struct_LOL_HeroDetailInfo() {
  // @@protoc_insertion_point(destructor:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  SharedDtor();
}

void struct_LOL_HeroDetailInfo::SharedDtor() {
}

void struct_LOL_HeroDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_LOL_HeroDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_LOL_HeroDetailInfo_descriptor_;
}

const struct_LOL_HeroDetailInfo& struct_LOL_HeroDetailInfo::default_instance() {
  protobuf_InitDefaults_proto_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<struct_LOL_HeroDetailInfo> struct_LOL_HeroDetailInfo_default_instance_;

struct_LOL_HeroDetailInfo* struct_LOL_HeroDetailInfo::New(::google::protobuf::Arena* arena) const {
  struct_LOL_HeroDetailInfo* n = new struct_LOL_HeroDetailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void struct_LOL_HeroDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xk_protobuf_data.struct_LOL_HeroDetailInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(struct_LOL_HeroDetailInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<struct_LOL_HeroDetailInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, configid_);

#undef ZR_HELPER_
#undef ZR_

}

bool struct_LOL_HeroDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_configId;
        break;
      }

      // optional uint32 configId = 2;
      case 2: {
        if (tag == 16) {
         parse_configId:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  return false;
#undef DO_
}

void struct_LOL_HeroDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 configId = 2;
  if (this->configid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->configid(), output);
  }

  // @@protoc_insertion_point(serialize_end:xk_protobuf_data.struct_LOL_HeroDetailInfo)
}

::google::protobuf::uint8* struct_LOL_HeroDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 configId = 2;
  if (this->configid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->configid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  return target;
}

size_t struct_LOL_HeroDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  size_t total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional uint32 configId = 2;
  if (this->configid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->configid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_LOL_HeroDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const struct_LOL_HeroDetailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const struct_LOL_HeroDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xk_protobuf_data.struct_LOL_HeroDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xk_protobuf_data.struct_LOL_HeroDetailInfo)
    UnsafeMergeFrom(*source);
  }
}

void struct_LOL_HeroDetailInfo::MergeFrom(const struct_LOL_HeroDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void struct_LOL_HeroDetailInfo::UnsafeMergeFrom(const struct_LOL_HeroDetailInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.configid() != 0) {
    set_configid(from.configid());
  }
}

void struct_LOL_HeroDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_LOL_HeroDetailInfo::CopyFrom(const struct_LOL_HeroDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xk_protobuf_data.struct_LOL_HeroDetailInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool struct_LOL_HeroDetailInfo::IsInitialized() const {

  return true;
}

void struct_LOL_HeroDetailInfo::Swap(struct_LOL_HeroDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void struct_LOL_HeroDetailInfo::InternalSwap(struct_LOL_HeroDetailInfo* other) {
  std::swap(id_, other->id_);
  std::swap(configid_, other->configid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata struct_LOL_HeroDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_LOL_HeroDetailInfo_descriptor_;
  metadata.reflection = struct_LOL_HeroDetailInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// struct_LOL_HeroDetailInfo

// optional uint64 id = 1;
void struct_LOL_HeroDetailInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 struct_LOL_HeroDetailInfo::id() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_LOL_HeroDetailInfo.id)
  return id_;
}
void struct_LOL_HeroDetailInfo::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_LOL_HeroDetailInfo.id)
}

// optional uint32 configId = 2;
void struct_LOL_HeroDetailInfo::clear_configid() {
  configid_ = 0u;
}
::google::protobuf::uint32 struct_LOL_HeroDetailInfo::configid() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_LOL_HeroDetailInfo.configId)
  return configid_;
}
void struct_LOL_HeroDetailInfo::set_configid(::google::protobuf::uint32 value) {
  
  configid_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_LOL_HeroDetailInfo.configId)
}

inline const struct_LOL_HeroDetailInfo* struct_LOL_HeroDetailInfo::internal_default_instance() {
  return &struct_LOL_HeroDetailInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int struct_ChatInfo::kChannelIdFieldNumber;
const int struct_ChatInfo::kSenderFieldNumber;
const int struct_ChatInfo::kReceiverFieldNumber;
const int struct_ChatInfo::kTalkMsgFieldNumber;
const int struct_ChatInfo::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

struct_ChatInfo::struct_ChatInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_proto_5fstruct_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:xk_protobuf_data.struct_ChatInfo)
}

void struct_ChatInfo::InitAsDefaultInstance() {
  sender_ = const_cast< ::xk_protobuf_data::struct_PlayerSimpleInfo*>(
      ::xk_protobuf_data::struct_PlayerSimpleInfo::internal_default_instance());
  receiver_ = const_cast< ::xk_protobuf_data::struct_PlayerSimpleInfo*>(
      ::xk_protobuf_data::struct_PlayerSimpleInfo::internal_default_instance());
}

struct_ChatInfo::struct_ChatInfo(const struct_ChatInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xk_protobuf_data.struct_ChatInfo)
}

void struct_ChatInfo::SharedCtor() {
  talkmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = NULL;
  receiver_ = NULL;
  ::memset(&time_, 0, reinterpret_cast<char*>(&channelid_) -
    reinterpret_cast<char*>(&time_) + sizeof(channelid_));
  _cached_size_ = 0;
}

struct_ChatInfo::~struct_ChatInfo() {
  // @@protoc_insertion_point(destructor:xk_protobuf_data.struct_ChatInfo)
  SharedDtor();
}

void struct_ChatInfo::SharedDtor() {
  talkmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &struct_ChatInfo_default_instance_.get()) {
    delete sender_;
    delete receiver_;
  }
}

void struct_ChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* struct_ChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return struct_ChatInfo_descriptor_;
}

const struct_ChatInfo& struct_ChatInfo::default_instance() {
  protobuf_InitDefaults_proto_5fstruct_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<struct_ChatInfo> struct_ChatInfo_default_instance_;

struct_ChatInfo* struct_ChatInfo::New(::google::protobuf::Arena* arena) const {
  struct_ChatInfo* n = new struct_ChatInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void struct_ChatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xk_protobuf_data.struct_ChatInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(struct_ChatInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<struct_ChatInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, channelid_);
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) delete sender_;
  sender_ = NULL;
  if (GetArenaNoVirtual() == NULL && receiver_ != NULL) delete receiver_;
  receiver_ = NULL;
  talkmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool struct_ChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xk_protobuf_data.struct_ChatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channelId = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Sender;
        break;
      }

      // optional .xk_protobuf_data.struct_PlayerSimpleInfo Sender = 2;
      case 2: {
        if (tag == 18) {
         parse_Sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Receiver;
        break;
      }

      // optional .xk_protobuf_data.struct_PlayerSimpleInfo Receiver = 3;
      case 3: {
        if (tag == 26) {
         parse_Receiver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receiver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TalkMsg;
        break;
      }

      // optional string TalkMsg = 4;
      case 4: {
        if (tag == 34) {
         parse_TalkMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talkmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->talkmsg().data(), this->talkmsg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xk_protobuf_data.struct_ChatInfo.TalkMsg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xk_protobuf_data.struct_ChatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xk_protobuf_data.struct_ChatInfo)
  return false;
#undef DO_
}

void struct_ChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xk_protobuf_data.struct_ChatInfo)
  // optional uint32 channelId = 1;
  if (this->channelid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channelid(), output);
  }

  // optional .xk_protobuf_data.struct_PlayerSimpleInfo Sender = 2;
  if (this->has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->sender_, output);
  }

  // optional .xk_protobuf_data.struct_PlayerSimpleInfo Receiver = 3;
  if (this->has_receiver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->receiver_, output);
  }

  // optional string TalkMsg = 4;
  if (this->talkmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->talkmsg().data(), this->talkmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xk_protobuf_data.struct_ChatInfo.TalkMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->talkmsg(), output);
  }

  // optional uint64 time = 5;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:xk_protobuf_data.struct_ChatInfo)
}

::google::protobuf::uint8* struct_ChatInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xk_protobuf_data.struct_ChatInfo)
  // optional uint32 channelId = 1;
  if (this->channelid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channelid(), target);
  }

  // optional .xk_protobuf_data.struct_PlayerSimpleInfo Sender = 2;
  if (this->has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->sender_, false, target);
  }

  // optional .xk_protobuf_data.struct_PlayerSimpleInfo Receiver = 3;
  if (this->has_receiver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->receiver_, false, target);
  }

  // optional string TalkMsg = 4;
  if (this->talkmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->talkmsg().data(), this->talkmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xk_protobuf_data.struct_ChatInfo.TalkMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->talkmsg(), target);
  }

  // optional uint64 time = 5;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xk_protobuf_data.struct_ChatInfo)
  return target;
}

size_t struct_ChatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xk_protobuf_data.struct_ChatInfo)
  size_t total_size = 0;

  // optional uint32 channelId = 1;
  if (this->channelid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channelid());
  }

  // optional .xk_protobuf_data.struct_PlayerSimpleInfo Sender = 2;
  if (this->has_sender()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sender_);
  }

  // optional .xk_protobuf_data.struct_PlayerSimpleInfo Receiver = 3;
  if (this->has_receiver()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->receiver_);
  }

  // optional string TalkMsg = 4;
  if (this->talkmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->talkmsg());
  }

  // optional uint64 time = 5;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void struct_ChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xk_protobuf_data.struct_ChatInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const struct_ChatInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const struct_ChatInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xk_protobuf_data.struct_ChatInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xk_protobuf_data.struct_ChatInfo)
    UnsafeMergeFrom(*source);
  }
}

void struct_ChatInfo::MergeFrom(const struct_ChatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xk_protobuf_data.struct_ChatInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void struct_ChatInfo::UnsafeMergeFrom(const struct_ChatInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.channelid() != 0) {
    set_channelid(from.channelid());
  }
  if (from.has_sender()) {
    mutable_sender()->::xk_protobuf_data::struct_PlayerSimpleInfo::MergeFrom(from.sender());
  }
  if (from.has_receiver()) {
    mutable_receiver()->::xk_protobuf_data::struct_PlayerSimpleInfo::MergeFrom(from.receiver());
  }
  if (from.talkmsg().size() > 0) {

    talkmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.talkmsg_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void struct_ChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xk_protobuf_data.struct_ChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void struct_ChatInfo::CopyFrom(const struct_ChatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xk_protobuf_data.struct_ChatInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool struct_ChatInfo::IsInitialized() const {

  return true;
}

void struct_ChatInfo::Swap(struct_ChatInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void struct_ChatInfo::InternalSwap(struct_ChatInfo* other) {
  std::swap(channelid_, other->channelid_);
  std::swap(sender_, other->sender_);
  std::swap(receiver_, other->receiver_);
  talkmsg_.Swap(&other->talkmsg_);
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata struct_ChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = struct_ChatInfo_descriptor_;
  metadata.reflection = struct_ChatInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// struct_ChatInfo

// optional uint32 channelId = 1;
void struct_ChatInfo::clear_channelid() {
  channelid_ = 0u;
}
::google::protobuf::uint32 struct_ChatInfo::channelid() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_ChatInfo.channelId)
  return channelid_;
}
void struct_ChatInfo::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_ChatInfo.channelId)
}

// optional .xk_protobuf_data.struct_PlayerSimpleInfo Sender = 2;
bool struct_ChatInfo::has_sender() const {
  return this != internal_default_instance() && sender_ != NULL;
}
void struct_ChatInfo::clear_sender() {
  if (GetArenaNoVirtual() == NULL && sender_ != NULL) delete sender_;
  sender_ = NULL;
}
const ::xk_protobuf_data::struct_PlayerSimpleInfo& struct_ChatInfo::sender() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_ChatInfo.Sender)
  return sender_ != NULL ? *sender_
                         : *::xk_protobuf_data::struct_PlayerSimpleInfo::internal_default_instance();
}
::xk_protobuf_data::struct_PlayerSimpleInfo* struct_ChatInfo::mutable_sender() {
  
  if (sender_ == NULL) {
    sender_ = new ::xk_protobuf_data::struct_PlayerSimpleInfo;
  }
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.struct_ChatInfo.Sender)
  return sender_;
}
::xk_protobuf_data::struct_PlayerSimpleInfo* struct_ChatInfo::release_sender() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.struct_ChatInfo.Sender)
  
  ::xk_protobuf_data::struct_PlayerSimpleInfo* temp = sender_;
  sender_ = NULL;
  return temp;
}
void struct_ChatInfo::set_allocated_sender(::xk_protobuf_data::struct_PlayerSimpleInfo* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.struct_ChatInfo.Sender)
}

// optional .xk_protobuf_data.struct_PlayerSimpleInfo Receiver = 3;
bool struct_ChatInfo::has_receiver() const {
  return this != internal_default_instance() && receiver_ != NULL;
}
void struct_ChatInfo::clear_receiver() {
  if (GetArenaNoVirtual() == NULL && receiver_ != NULL) delete receiver_;
  receiver_ = NULL;
}
const ::xk_protobuf_data::struct_PlayerSimpleInfo& struct_ChatInfo::receiver() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_ChatInfo.Receiver)
  return receiver_ != NULL ? *receiver_
                         : *::xk_protobuf_data::struct_PlayerSimpleInfo::internal_default_instance();
}
::xk_protobuf_data::struct_PlayerSimpleInfo* struct_ChatInfo::mutable_receiver() {
  
  if (receiver_ == NULL) {
    receiver_ = new ::xk_protobuf_data::struct_PlayerSimpleInfo;
  }
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.struct_ChatInfo.Receiver)
  return receiver_;
}
::xk_protobuf_data::struct_PlayerSimpleInfo* struct_ChatInfo::release_receiver() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.struct_ChatInfo.Receiver)
  
  ::xk_protobuf_data::struct_PlayerSimpleInfo* temp = receiver_;
  receiver_ = NULL;
  return temp;
}
void struct_ChatInfo::set_allocated_receiver(::xk_protobuf_data::struct_PlayerSimpleInfo* receiver) {
  delete receiver_;
  receiver_ = receiver;
  if (receiver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.struct_ChatInfo.Receiver)
}

// optional string TalkMsg = 4;
void struct_ChatInfo::clear_talkmsg() {
  talkmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& struct_ChatInfo::talkmsg() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_ChatInfo.TalkMsg)
  return talkmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void struct_ChatInfo::set_talkmsg(const ::std::string& value) {
  
  talkmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_ChatInfo.TalkMsg)
}
void struct_ChatInfo::set_talkmsg(const char* value) {
  
  talkmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xk_protobuf_data.struct_ChatInfo.TalkMsg)
}
void struct_ChatInfo::set_talkmsg(const char* value, size_t size) {
  
  talkmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xk_protobuf_data.struct_ChatInfo.TalkMsg)
}
::std::string* struct_ChatInfo::mutable_talkmsg() {
  
  // @@protoc_insertion_point(field_mutable:xk_protobuf_data.struct_ChatInfo.TalkMsg)
  return talkmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* struct_ChatInfo::release_talkmsg() {
  // @@protoc_insertion_point(field_release:xk_protobuf_data.struct_ChatInfo.TalkMsg)
  
  return talkmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void struct_ChatInfo::set_allocated_talkmsg(::std::string* talkmsg) {
  if (talkmsg != NULL) {
    
  } else {
    
  }
  talkmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), talkmsg);
  // @@protoc_insertion_point(field_set_allocated:xk_protobuf_data.struct_ChatInfo.TalkMsg)
}

// optional uint64 time = 5;
void struct_ChatInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 struct_ChatInfo::time() const {
  // @@protoc_insertion_point(field_get:xk_protobuf_data.struct_ChatInfo.time)
  return time_;
}
void struct_ChatInfo::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:xk_protobuf_data.struct_ChatInfo.time)
}

inline const struct_ChatInfo* struct_ChatInfo::internal_default_instance() {
  return &struct_ChatInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xk_protobuf_data

// @@protoc_insertion_point(global_scope)
