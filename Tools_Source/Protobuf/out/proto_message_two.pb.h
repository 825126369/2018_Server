// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_message_two.proto

#ifndef PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED
#define PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

class ClientSendData;
class ServerSendData;

// ===================================================================

class ClientSendData : public ::google::protobuf::Message {
 public:
  ClientSendData();
  virtual ~ClientSendData();

  ClientSendData(const ClientSendData& from);

  inline ClientSendData& operator=(const ClientSendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientSendData& default_instance();

  void Swap(ClientSendData* other);

  // implements Message ----------------------------------------------

  ClientSendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientSendData& from);
  void MergeFrom(const ClientSendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SenderName = 1;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSenderNameFieldNumber = 1;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // optional string TalkMsg = 2;
  inline bool has_talkmsg() const;
  inline void clear_talkmsg();
  static const int kTalkMsgFieldNumber = 2;
  inline const ::std::string& talkmsg() const;
  inline void set_talkmsg(const ::std::string& value);
  inline void set_talkmsg(const char* value);
  inline void set_talkmsg(const char* value, size_t size);
  inline ::std::string* mutable_talkmsg();
  inline ::std::string* release_talkmsg();
  inline void set_allocated_talkmsg(::std::string* talkmsg);

  // @@protoc_insertion_point(class_scope:ClientSendData)
 private:
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_talkmsg();
  inline void clear_has_talkmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sendername_;
  ::std::string* talkmsg_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static ClientSendData* default_instance_;
};
// -------------------------------------------------------------------

class ServerSendData : public ::google::protobuf::Message {
 public:
  ServerSendData();
  virtual ~ServerSendData();

  ServerSendData(const ServerSendData& from);

  inline ServerSendData& operator=(const ServerSendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerSendData& default_instance();

  void Swap(ServerSendData* other);

  // implements Message ----------------------------------------------

  ServerSendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerSendData& from);
  void MergeFrom(const ServerSendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // optional string NickName = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional string TalkMsg = 3;
  inline bool has_talkmsg() const;
  inline void clear_talkmsg();
  static const int kTalkMsgFieldNumber = 3;
  inline const ::std::string& talkmsg() const;
  inline void set_talkmsg(const ::std::string& value);
  inline void set_talkmsg(const char* value);
  inline void set_talkmsg(const char* value, size_t size);
  inline ::std::string* mutable_talkmsg();
  inline ::std::string* release_talkmsg();
  inline void set_allocated_talkmsg(::std::string* talkmsg);

  // optional string TalkTime = 4;
  inline bool has_talktime() const;
  inline void clear_talktime();
  static const int kTalkTimeFieldNumber = 4;
  inline const ::std::string& talktime() const;
  inline void set_talktime(const ::std::string& value);
  inline void set_talktime(const char* value);
  inline void set_talktime(const char* value, size_t size);
  inline ::std::string* mutable_talktime();
  inline ::std::string* release_talktime();
  inline void set_allocated_talktime(::std::string* talktime);

  // @@protoc_insertion_point(class_scope:ServerSendData)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_talkmsg();
  inline void clear_has_talkmsg();
  inline void set_has_talktime();
  inline void clear_has_talktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* result_;
  ::std::string* nickname_;
  ::std::string* talkmsg_;
  ::std::string* talktime_;
  friend void  protobuf_AddDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_AssignDesc_proto_5fmessage_5ftwo_2eproto();
  friend void protobuf_ShutdownFile_proto_5fmessage_5ftwo_2eproto();

  void InitAsDefaultInstance();
  static ServerSendData* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientSendData

// optional string SenderName = 1;
inline bool ClientSendData::has_sendername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientSendData::set_has_sendername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientSendData::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientSendData::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& ClientSendData::sendername() const {
  // @@protoc_insertion_point(field_get:ClientSendData.SenderName)
  return *sendername_;
}
inline void ClientSendData::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
  // @@protoc_insertion_point(field_set:ClientSendData.SenderName)
}
inline void ClientSendData::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientSendData.SenderName)
}
inline void ClientSendData::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientSendData.SenderName)
}
inline ::std::string* ClientSendData::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientSendData.SenderName)
  return sendername_;
}
inline ::std::string* ClientSendData::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientSendData::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientSendData.SenderName)
}

// optional string TalkMsg = 2;
inline bool ClientSendData::has_talkmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientSendData::set_has_talkmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientSendData::clear_has_talkmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientSendData::clear_talkmsg() {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_->clear();
  }
  clear_has_talkmsg();
}
inline const ::std::string& ClientSendData::talkmsg() const {
  // @@protoc_insertion_point(field_get:ClientSendData.TalkMsg)
  return *talkmsg_;
}
inline void ClientSendData::set_talkmsg(const ::std::string& value) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(value);
  // @@protoc_insertion_point(field_set:ClientSendData.TalkMsg)
}
inline void ClientSendData::set_talkmsg(const char* value) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientSendData.TalkMsg)
}
inline void ClientSendData::set_talkmsg(const char* value, size_t size) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientSendData.TalkMsg)
}
inline ::std::string* ClientSendData::mutable_talkmsg() {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientSendData.TalkMsg)
  return talkmsg_;
}
inline ::std::string* ClientSendData::release_talkmsg() {
  clear_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = talkmsg_;
    talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientSendData::set_allocated_talkmsg(::std::string* talkmsg) {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkmsg_;
  }
  if (talkmsg) {
    set_has_talkmsg();
    talkmsg_ = talkmsg;
  } else {
    clear_has_talkmsg();
    talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientSendData.TalkMsg)
}

// -------------------------------------------------------------------

// ServerSendData

// optional string Result = 1;
inline bool ServerSendData::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerSendData::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerSendData::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerSendData::clear_result() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& ServerSendData::result() const {
  // @@protoc_insertion_point(field_get:ServerSendData.Result)
  return *result_;
}
inline void ServerSendData::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set:ServerSendData.Result)
}
inline void ServerSendData::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerSendData.Result)
}
inline void ServerSendData::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerSendData.Result)
}
inline ::std::string* ServerSendData::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ServerSendData.Result)
  return result_;
}
inline ::std::string* ServerSendData::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerSendData::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ServerSendData.Result)
}

// optional string NickName = 2;
inline bool ServerSendData::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerSendData::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerSendData::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerSendData::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& ServerSendData::nickname() const {
  // @@protoc_insertion_point(field_get:ServerSendData.NickName)
  return *nickname_;
}
inline void ServerSendData::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set:ServerSendData.NickName)
}
inline void ServerSendData::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerSendData.NickName)
}
inline void ServerSendData::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerSendData.NickName)
}
inline ::std::string* ServerSendData::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    nickname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ServerSendData.NickName)
  return nickname_;
}
inline ::std::string* ServerSendData::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerSendData::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ServerSendData.NickName)
}

// optional string TalkMsg = 3;
inline bool ServerSendData::has_talkmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerSendData::set_has_talkmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerSendData::clear_has_talkmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerSendData::clear_talkmsg() {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_->clear();
  }
  clear_has_talkmsg();
}
inline const ::std::string& ServerSendData::talkmsg() const {
  // @@protoc_insertion_point(field_get:ServerSendData.TalkMsg)
  return *talkmsg_;
}
inline void ServerSendData::set_talkmsg(const ::std::string& value) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(value);
  // @@protoc_insertion_point(field_set:ServerSendData.TalkMsg)
}
inline void ServerSendData::set_talkmsg(const char* value) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerSendData.TalkMsg)
}
inline void ServerSendData::set_talkmsg(const char* value, size_t size) {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  talkmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerSendData.TalkMsg)
}
inline ::std::string* ServerSendData::mutable_talkmsg() {
  set_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talkmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ServerSendData.TalkMsg)
  return talkmsg_;
}
inline ::std::string* ServerSendData::release_talkmsg() {
  clear_has_talkmsg();
  if (talkmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = talkmsg_;
    talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerSendData::set_allocated_talkmsg(::std::string* talkmsg) {
  if (talkmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkmsg_;
  }
  if (talkmsg) {
    set_has_talkmsg();
    talkmsg_ = talkmsg;
  } else {
    clear_has_talkmsg();
    talkmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ServerSendData.TalkMsg)
}

// optional string TalkTime = 4;
inline bool ServerSendData::has_talktime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerSendData::set_has_talktime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerSendData::clear_has_talktime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerSendData::clear_talktime() {
  if (talktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talktime_->clear();
  }
  clear_has_talktime();
}
inline const ::std::string& ServerSendData::talktime() const {
  // @@protoc_insertion_point(field_get:ServerSendData.TalkTime)
  return *talktime_;
}
inline void ServerSendData::set_talktime(const ::std::string& value) {
  set_has_talktime();
  if (talktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talktime_ = new ::std::string;
  }
  talktime_->assign(value);
  // @@protoc_insertion_point(field_set:ServerSendData.TalkTime)
}
inline void ServerSendData::set_talktime(const char* value) {
  set_has_talktime();
  if (talktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talktime_ = new ::std::string;
  }
  talktime_->assign(value);
  // @@protoc_insertion_point(field_set_char:ServerSendData.TalkTime)
}
inline void ServerSendData::set_talktime(const char* value, size_t size) {
  set_has_talktime();
  if (talktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talktime_ = new ::std::string;
  }
  talktime_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ServerSendData.TalkTime)
}
inline ::std::string* ServerSendData::mutable_talktime() {
  set_has_talktime();
  if (talktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    talktime_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ServerSendData.TalkTime)
  return talktime_;
}
inline ::std::string* ServerSendData::release_talktime() {
  clear_has_talktime();
  if (talktime_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = talktime_;
    talktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerSendData::set_allocated_talktime(::std::string* talktime) {
  if (talktime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talktime_;
  }
  if (talktime) {
    set_has_talktime();
    talktime_ = talktime;
  } else {
    clear_has_talktime();
    talktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ServerSendData.TalkTime)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_5fmessage_5ftwo_2eproto__INCLUDED
